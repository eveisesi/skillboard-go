// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CharacterCloneMetum is an object representing the database table.
type CharacterCloneMetum struct {
	CharacterID           uint64    `boil:"character_id" json:"character_id" toml:"character_id" yaml:"character_id"`
	LastCloneJumpDate     null.Time `boil:"last_clone_jump_date" json:"last_clone_jump_date,omitempty" toml:"last_clone_jump_date" yaml:"last_clone_jump_date,omitempty"`
	LastStationChangeDate null.Time `boil:"last_station_change_date" json:"last_station_change_date,omitempty" toml:"last_station_change_date" yaml:"last_station_change_date,omitempty"`
	CreatedAt             time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt             time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *characterCloneMetumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L characterCloneMetumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CharacterCloneMetumColumns = struct {
	CharacterID           string
	LastCloneJumpDate     string
	LastStationChangeDate string
	CreatedAt             string
	UpdatedAt             string
}{
	CharacterID:           "character_id",
	LastCloneJumpDate:     "last_clone_jump_date",
	LastStationChangeDate: "last_station_change_date",
	CreatedAt:             "created_at",
	UpdatedAt:             "updated_at",
}

var CharacterCloneMetumTableColumns = struct {
	CharacterID           string
	LastCloneJumpDate     string
	LastStationChangeDate string
	CreatedAt             string
	UpdatedAt             string
}{
	CharacterID:           "character_clone_meta.character_id",
	LastCloneJumpDate:     "character_clone_meta.last_clone_jump_date",
	LastStationChangeDate: "character_clone_meta.last_station_change_date",
	CreatedAt:             "character_clone_meta.created_at",
	UpdatedAt:             "character_clone_meta.updated_at",
}

// Generated where

var CharacterCloneMetumWhere = struct {
	CharacterID           whereHelperuint64
	LastCloneJumpDate     whereHelpernull_Time
	LastStationChangeDate whereHelpernull_Time
	CreatedAt             whereHelpertime_Time
	UpdatedAt             whereHelpertime_Time
}{
	CharacterID:           whereHelperuint64{field: "`character_clone_meta`.`character_id`"},
	LastCloneJumpDate:     whereHelpernull_Time{field: "`character_clone_meta`.`last_clone_jump_date`"},
	LastStationChangeDate: whereHelpernull_Time{field: "`character_clone_meta`.`last_station_change_date`"},
	CreatedAt:             whereHelpertime_Time{field: "`character_clone_meta`.`created_at`"},
	UpdatedAt:             whereHelpertime_Time{field: "`character_clone_meta`.`updated_at`"},
}

// CharacterCloneMetumRels is where relationship names are stored.
var CharacterCloneMetumRels = struct {
	Character string
}{
	Character: "Character",
}

// characterCloneMetumR is where relationships are stored.
type characterCloneMetumR struct {
	Character *User `boil:"Character" json:"Character" toml:"Character" yaml:"Character"`
}

// NewStruct creates a new relationship struct
func (*characterCloneMetumR) NewStruct() *characterCloneMetumR {
	return &characterCloneMetumR{}
}

// characterCloneMetumL is where Load methods for each relationship are stored.
type characterCloneMetumL struct{}

var (
	characterCloneMetumAllColumns            = []string{"character_id", "last_clone_jump_date", "last_station_change_date", "created_at", "updated_at"}
	characterCloneMetumColumnsWithoutDefault = []string{"character_id", "last_clone_jump_date", "last_station_change_date", "created_at", "updated_at"}
	characterCloneMetumColumnsWithDefault    = []string{}
	characterCloneMetumPrimaryKeyColumns     = []string{"character_id"}
)

type (
	// CharacterCloneMetumSlice is an alias for a slice of pointers to CharacterCloneMetum.
	// This should almost always be used instead of []CharacterCloneMetum.
	CharacterCloneMetumSlice []*CharacterCloneMetum
	// CharacterCloneMetumHook is the signature for custom CharacterCloneMetum hook methods
	CharacterCloneMetumHook func(context.Context, boil.ContextExecutor, *CharacterCloneMetum) error

	characterCloneMetumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	characterCloneMetumType                 = reflect.TypeOf(&CharacterCloneMetum{})
	characterCloneMetumMapping              = queries.MakeStructMapping(characterCloneMetumType)
	characterCloneMetumPrimaryKeyMapping, _ = queries.BindMapping(characterCloneMetumType, characterCloneMetumMapping, characterCloneMetumPrimaryKeyColumns)
	characterCloneMetumInsertCacheMut       sync.RWMutex
	characterCloneMetumInsertCache          = make(map[string]insertCache)
	characterCloneMetumUpdateCacheMut       sync.RWMutex
	characterCloneMetumUpdateCache          = make(map[string]updateCache)
	characterCloneMetumUpsertCacheMut       sync.RWMutex
	characterCloneMetumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var characterCloneMetumBeforeInsertHooks []CharacterCloneMetumHook
var characterCloneMetumBeforeUpdateHooks []CharacterCloneMetumHook
var characterCloneMetumBeforeDeleteHooks []CharacterCloneMetumHook
var characterCloneMetumBeforeUpsertHooks []CharacterCloneMetumHook

var characterCloneMetumAfterInsertHooks []CharacterCloneMetumHook
var characterCloneMetumAfterSelectHooks []CharacterCloneMetumHook
var characterCloneMetumAfterUpdateHooks []CharacterCloneMetumHook
var characterCloneMetumAfterDeleteHooks []CharacterCloneMetumHook
var characterCloneMetumAfterUpsertHooks []CharacterCloneMetumHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CharacterCloneMetum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterCloneMetumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CharacterCloneMetum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterCloneMetumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CharacterCloneMetum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterCloneMetumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CharacterCloneMetum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterCloneMetumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CharacterCloneMetum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterCloneMetumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CharacterCloneMetum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterCloneMetumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CharacterCloneMetum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterCloneMetumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CharacterCloneMetum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterCloneMetumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CharacterCloneMetum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterCloneMetumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCharacterCloneMetumHook registers your hook function for all future operations.
func AddCharacterCloneMetumHook(hookPoint boil.HookPoint, characterCloneMetumHook CharacterCloneMetumHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		characterCloneMetumBeforeInsertHooks = append(characterCloneMetumBeforeInsertHooks, characterCloneMetumHook)
	case boil.BeforeUpdateHook:
		characterCloneMetumBeforeUpdateHooks = append(characterCloneMetumBeforeUpdateHooks, characterCloneMetumHook)
	case boil.BeforeDeleteHook:
		characterCloneMetumBeforeDeleteHooks = append(characterCloneMetumBeforeDeleteHooks, characterCloneMetumHook)
	case boil.BeforeUpsertHook:
		characterCloneMetumBeforeUpsertHooks = append(characterCloneMetumBeforeUpsertHooks, characterCloneMetumHook)
	case boil.AfterInsertHook:
		characterCloneMetumAfterInsertHooks = append(characterCloneMetumAfterInsertHooks, characterCloneMetumHook)
	case boil.AfterSelectHook:
		characterCloneMetumAfterSelectHooks = append(characterCloneMetumAfterSelectHooks, characterCloneMetumHook)
	case boil.AfterUpdateHook:
		characterCloneMetumAfterUpdateHooks = append(characterCloneMetumAfterUpdateHooks, characterCloneMetumHook)
	case boil.AfterDeleteHook:
		characterCloneMetumAfterDeleteHooks = append(characterCloneMetumAfterDeleteHooks, characterCloneMetumHook)
	case boil.AfterUpsertHook:
		characterCloneMetumAfterUpsertHooks = append(characterCloneMetumAfterUpsertHooks, characterCloneMetumHook)
	}
}

// OneG returns a single characterCloneMetum record from the query using the global executor.
func (q characterCloneMetumQuery) OneG(ctx context.Context) (*CharacterCloneMetum, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single characterCloneMetum record from the query.
func (q characterCloneMetumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CharacterCloneMetum, error) {
	o := &CharacterCloneMetum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for character_clone_meta")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all CharacterCloneMetum records from the query using the global executor.
func (q characterCloneMetumQuery) AllG(ctx context.Context) (CharacterCloneMetumSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all CharacterCloneMetum records from the query.
func (q characterCloneMetumQuery) All(ctx context.Context, exec boil.ContextExecutor) (CharacterCloneMetumSlice, error) {
	var o []*CharacterCloneMetum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to CharacterCloneMetum slice")
	}

	if len(characterCloneMetumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all CharacterCloneMetum records in the query, and panics on error.
func (q characterCloneMetumQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all CharacterCloneMetum records in the query.
func (q characterCloneMetumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count character_clone_meta rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q characterCloneMetumQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q characterCloneMetumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if character_clone_meta exists")
	}

	return count > 0, nil
}

// Character pointed to by the foreign key.
func (o *CharacterCloneMetum) Character(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`character_id` = ?", o.CharacterID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`users`")

	return query
}

// LoadCharacter allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (characterCloneMetumL) LoadCharacter(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCharacterCloneMetum interface{}, mods queries.Applicator) error {
	var slice []*CharacterCloneMetum
	var object *CharacterCloneMetum

	if singular {
		object = maybeCharacterCloneMetum.(*CharacterCloneMetum)
	} else {
		slice = *maybeCharacterCloneMetum.(*[]*CharacterCloneMetum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &characterCloneMetumR{}
		}
		args = append(args, object.CharacterID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &characterCloneMetumR{}
			}

			for _, a := range args {
				if a == obj.CharacterID {
					continue Outer
				}
			}

			args = append(args, obj.CharacterID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.character_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(characterCloneMetumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Character = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CharacterCharacterCloneMetum = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CharacterID == foreign.CharacterID {
				local.R.Character = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CharacterCharacterCloneMetum = local
				break
			}
		}
	}

	return nil
}

// SetCharacterG of the characterCloneMetum to the related item.
// Sets o.R.Character to related.
// Adds o to related.R.CharacterCharacterCloneMetum.
// Uses the global database handle.
func (o *CharacterCloneMetum) SetCharacterG(ctx context.Context, insert bool, related *User) error {
	return o.SetCharacter(ctx, boil.GetContextDB(), insert, related)
}

// SetCharacter of the characterCloneMetum to the related item.
// Sets o.R.Character to related.
// Adds o to related.R.CharacterCharacterCloneMetum.
func (o *CharacterCloneMetum) SetCharacter(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `character_clone_meta` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"character_id"}),
		strmangle.WhereClause("`", "`", 0, characterCloneMetumPrimaryKeyColumns),
	)
	values := []interface{}{related.CharacterID, o.CharacterID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CharacterID = related.CharacterID
	if o.R == nil {
		o.R = &characterCloneMetumR{
			Character: related,
		}
	} else {
		o.R.Character = related
	}

	if related.R == nil {
		related.R = &userR{
			CharacterCharacterCloneMetum: o,
		}
	} else {
		related.R.CharacterCharacterCloneMetum = o
	}

	return nil
}

// CharacterCloneMeta retrieves all the records using an executor.
func CharacterCloneMeta(mods ...qm.QueryMod) characterCloneMetumQuery {
	mods = append(mods, qm.From("`character_clone_meta`"))
	return characterCloneMetumQuery{NewQuery(mods...)}
}

// FindCharacterCloneMetumG retrieves a single record by ID.
func FindCharacterCloneMetumG(ctx context.Context, characterID uint64, selectCols ...string) (*CharacterCloneMetum, error) {
	return FindCharacterCloneMetum(ctx, boil.GetContextDB(), characterID, selectCols...)
}

// FindCharacterCloneMetum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCharacterCloneMetum(ctx context.Context, exec boil.ContextExecutor, characterID uint64, selectCols ...string) (*CharacterCloneMetum, error) {
	characterCloneMetumObj := &CharacterCloneMetum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `character_clone_meta` where `character_id`=?", sel,
	)

	q := queries.Raw(query, characterID)

	err := q.Bind(ctx, exec, characterCloneMetumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from character_clone_meta")
	}

	if err = characterCloneMetumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return characterCloneMetumObj, err
	}

	return characterCloneMetumObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *CharacterCloneMetum) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CharacterCloneMetum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no character_clone_meta provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(characterCloneMetumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	characterCloneMetumInsertCacheMut.RLock()
	cache, cached := characterCloneMetumInsertCache[key]
	characterCloneMetumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			characterCloneMetumAllColumns,
			characterCloneMetumColumnsWithDefault,
			characterCloneMetumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(characterCloneMetumType, characterCloneMetumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(characterCloneMetumType, characterCloneMetumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `character_clone_meta` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `character_clone_meta` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `character_clone_meta` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, characterCloneMetumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into character_clone_meta")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.CharacterID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for character_clone_meta")
	}

CacheNoHooks:
	if !cached {
		characterCloneMetumInsertCacheMut.Lock()
		characterCloneMetumInsertCache[key] = cache
		characterCloneMetumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single CharacterCloneMetum record using the global executor.
// See Update for more documentation.
func (o *CharacterCloneMetum) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the CharacterCloneMetum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CharacterCloneMetum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	characterCloneMetumUpdateCacheMut.RLock()
	cache, cached := characterCloneMetumUpdateCache[key]
	characterCloneMetumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			characterCloneMetumAllColumns,
			characterCloneMetumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update character_clone_meta, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `character_clone_meta` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, characterCloneMetumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(characterCloneMetumType, characterCloneMetumMapping, append(wl, characterCloneMetumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update character_clone_meta row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for character_clone_meta")
	}

	if !cached {
		characterCloneMetumUpdateCacheMut.Lock()
		characterCloneMetumUpdateCache[key] = cache
		characterCloneMetumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q characterCloneMetumQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q characterCloneMetumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for character_clone_meta")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for character_clone_meta")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CharacterCloneMetumSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CharacterCloneMetumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), characterCloneMetumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `character_clone_meta` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, characterCloneMetumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in characterCloneMetum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all characterCloneMetum")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *CharacterCloneMetum) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLCharacterCloneMetumUniqueColumns = []string{
	"character_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CharacterCloneMetum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no character_clone_meta provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(characterCloneMetumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCharacterCloneMetumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	characterCloneMetumUpsertCacheMut.RLock()
	cache, cached := characterCloneMetumUpsertCache[key]
	characterCloneMetumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			characterCloneMetumAllColumns,
			characterCloneMetumColumnsWithDefault,
			characterCloneMetumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			characterCloneMetumAllColumns,
			characterCloneMetumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("boiler: unable to upsert character_clone_meta, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`character_clone_meta`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `character_clone_meta` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(characterCloneMetumType, characterCloneMetumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(characterCloneMetumType, characterCloneMetumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert for character_clone_meta")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(characterCloneMetumType, characterCloneMetumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to retrieve unique values for character_clone_meta")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for character_clone_meta")
	}

CacheNoHooks:
	if !cached {
		characterCloneMetumUpsertCacheMut.Lock()
		characterCloneMetumUpsertCache[key] = cache
		characterCloneMetumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single CharacterCloneMetum record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *CharacterCloneMetum) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single CharacterCloneMetum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CharacterCloneMetum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no CharacterCloneMetum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), characterCloneMetumPrimaryKeyMapping)
	sql := "DELETE FROM `character_clone_meta` WHERE `character_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from character_clone_meta")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for character_clone_meta")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q characterCloneMetumQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q characterCloneMetumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no characterCloneMetumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from character_clone_meta")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for character_clone_meta")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CharacterCloneMetumSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CharacterCloneMetumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(characterCloneMetumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), characterCloneMetumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `character_clone_meta` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, characterCloneMetumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from characterCloneMetum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for character_clone_meta")
	}

	if len(characterCloneMetumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *CharacterCloneMetum) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("boiler: no CharacterCloneMetum provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CharacterCloneMetum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCharacterCloneMetum(ctx, exec, o.CharacterID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CharacterCloneMetumSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("boiler: empty CharacterCloneMetumSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CharacterCloneMetumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CharacterCloneMetumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), characterCloneMetumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `character_clone_meta`.* FROM `character_clone_meta` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, characterCloneMetumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in CharacterCloneMetumSlice")
	}

	*o = slice

	return nil
}

// CharacterCloneMetumExistsG checks if the CharacterCloneMetum row exists.
func CharacterCloneMetumExistsG(ctx context.Context, characterID uint64) (bool, error) {
	return CharacterCloneMetumExists(ctx, boil.GetContextDB(), characterID)
}

// CharacterCloneMetumExists checks if the CharacterCloneMetum row exists.
func CharacterCloneMetumExists(ctx context.Context, exec boil.ContextExecutor, characterID uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `character_clone_meta` where `character_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, characterID)
	}
	row := exec.QueryRowContext(ctx, sql, characterID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if character_clone_meta exists")
	}

	return exists, nil
}
