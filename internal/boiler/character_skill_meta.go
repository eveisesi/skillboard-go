// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CharacterSkillMetum is an object representing the database table.
type CharacterSkillMetum struct {
	CharacterID   uint64    `boil:"character_id" json:"character_id" toml:"character_id" yaml:"character_id"`
	TotalSP       uint      `boil:"total_sp" json:"total_sp" toml:"total_sp" yaml:"total_sp"`
	UnallocatedSP null.Uint `boil:"unallocated_sp" json:"unallocated_sp,omitempty" toml:"unallocated_sp" yaml:"unallocated_sp,omitempty"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *characterSkillMetumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L characterSkillMetumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CharacterSkillMetumColumns = struct {
	CharacterID   string
	TotalSP       string
	UnallocatedSP string
	CreatedAt     string
	UpdatedAt     string
}{
	CharacterID:   "character_id",
	TotalSP:       "total_sp",
	UnallocatedSP: "unallocated_sp",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
}

var CharacterSkillMetumTableColumns = struct {
	CharacterID   string
	TotalSP       string
	UnallocatedSP string
	CreatedAt     string
	UpdatedAt     string
}{
	CharacterID:   "character_skill_meta.character_id",
	TotalSP:       "character_skill_meta.total_sp",
	UnallocatedSP: "character_skill_meta.unallocated_sp",
	CreatedAt:     "character_skill_meta.created_at",
	UpdatedAt:     "character_skill_meta.updated_at",
}

// Generated where

var CharacterSkillMetumWhere = struct {
	CharacterID   whereHelperuint64
	TotalSP       whereHelperuint
	UnallocatedSP whereHelpernull_Uint
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
}{
	CharacterID:   whereHelperuint64{field: "`character_skill_meta`.`character_id`"},
	TotalSP:       whereHelperuint{field: "`character_skill_meta`.`total_sp`"},
	UnallocatedSP: whereHelpernull_Uint{field: "`character_skill_meta`.`unallocated_sp`"},
	CreatedAt:     whereHelpertime_Time{field: "`character_skill_meta`.`created_at`"},
	UpdatedAt:     whereHelpertime_Time{field: "`character_skill_meta`.`updated_at`"},
}

// CharacterSkillMetumRels is where relationship names are stored.
var CharacterSkillMetumRels = struct {
	Character string
}{
	Character: "Character",
}

// characterSkillMetumR is where relationships are stored.
type characterSkillMetumR struct {
	Character *User `boil:"Character" json:"Character" toml:"Character" yaml:"Character"`
}

// NewStruct creates a new relationship struct
func (*characterSkillMetumR) NewStruct() *characterSkillMetumR {
	return &characterSkillMetumR{}
}

// characterSkillMetumL is where Load methods for each relationship are stored.
type characterSkillMetumL struct{}

var (
	characterSkillMetumAllColumns            = []string{"character_id", "total_sp", "unallocated_sp", "created_at", "updated_at"}
	characterSkillMetumColumnsWithoutDefault = []string{"character_id", "total_sp", "unallocated_sp", "created_at", "updated_at"}
	characterSkillMetumColumnsWithDefault    = []string{}
	characterSkillMetumPrimaryKeyColumns     = []string{"character_id"}
)

type (
	// CharacterSkillMetumSlice is an alias for a slice of pointers to CharacterSkillMetum.
	// This should almost always be used instead of []CharacterSkillMetum.
	CharacterSkillMetumSlice []*CharacterSkillMetum
	// CharacterSkillMetumHook is the signature for custom CharacterSkillMetum hook methods
	CharacterSkillMetumHook func(context.Context, boil.ContextExecutor, *CharacterSkillMetum) error

	characterSkillMetumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	characterSkillMetumType                 = reflect.TypeOf(&CharacterSkillMetum{})
	characterSkillMetumMapping              = queries.MakeStructMapping(characterSkillMetumType)
	characterSkillMetumPrimaryKeyMapping, _ = queries.BindMapping(characterSkillMetumType, characterSkillMetumMapping, characterSkillMetumPrimaryKeyColumns)
	characterSkillMetumInsertCacheMut       sync.RWMutex
	characterSkillMetumInsertCache          = make(map[string]insertCache)
	characterSkillMetumUpdateCacheMut       sync.RWMutex
	characterSkillMetumUpdateCache          = make(map[string]updateCache)
	characterSkillMetumUpsertCacheMut       sync.RWMutex
	characterSkillMetumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var characterSkillMetumBeforeInsertHooks []CharacterSkillMetumHook
var characterSkillMetumBeforeUpdateHooks []CharacterSkillMetumHook
var characterSkillMetumBeforeDeleteHooks []CharacterSkillMetumHook
var characterSkillMetumBeforeUpsertHooks []CharacterSkillMetumHook

var characterSkillMetumAfterInsertHooks []CharacterSkillMetumHook
var characterSkillMetumAfterSelectHooks []CharacterSkillMetumHook
var characterSkillMetumAfterUpdateHooks []CharacterSkillMetumHook
var characterSkillMetumAfterDeleteHooks []CharacterSkillMetumHook
var characterSkillMetumAfterUpsertHooks []CharacterSkillMetumHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CharacterSkillMetum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterSkillMetumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CharacterSkillMetum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterSkillMetumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CharacterSkillMetum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterSkillMetumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CharacterSkillMetum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterSkillMetumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CharacterSkillMetum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterSkillMetumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CharacterSkillMetum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterSkillMetumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CharacterSkillMetum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterSkillMetumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CharacterSkillMetum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterSkillMetumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CharacterSkillMetum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterSkillMetumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCharacterSkillMetumHook registers your hook function for all future operations.
func AddCharacterSkillMetumHook(hookPoint boil.HookPoint, characterSkillMetumHook CharacterSkillMetumHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		characterSkillMetumBeforeInsertHooks = append(characterSkillMetumBeforeInsertHooks, characterSkillMetumHook)
	case boil.BeforeUpdateHook:
		characterSkillMetumBeforeUpdateHooks = append(characterSkillMetumBeforeUpdateHooks, characterSkillMetumHook)
	case boil.BeforeDeleteHook:
		characterSkillMetumBeforeDeleteHooks = append(characterSkillMetumBeforeDeleteHooks, characterSkillMetumHook)
	case boil.BeforeUpsertHook:
		characterSkillMetumBeforeUpsertHooks = append(characterSkillMetumBeforeUpsertHooks, characterSkillMetumHook)
	case boil.AfterInsertHook:
		characterSkillMetumAfterInsertHooks = append(characterSkillMetumAfterInsertHooks, characterSkillMetumHook)
	case boil.AfterSelectHook:
		characterSkillMetumAfterSelectHooks = append(characterSkillMetumAfterSelectHooks, characterSkillMetumHook)
	case boil.AfterUpdateHook:
		characterSkillMetumAfterUpdateHooks = append(characterSkillMetumAfterUpdateHooks, characterSkillMetumHook)
	case boil.AfterDeleteHook:
		characterSkillMetumAfterDeleteHooks = append(characterSkillMetumAfterDeleteHooks, characterSkillMetumHook)
	case boil.AfterUpsertHook:
		characterSkillMetumAfterUpsertHooks = append(characterSkillMetumAfterUpsertHooks, characterSkillMetumHook)
	}
}

// OneG returns a single characterSkillMetum record from the query using the global executor.
func (q characterSkillMetumQuery) OneG(ctx context.Context) (*CharacterSkillMetum, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single characterSkillMetum record from the query.
func (q characterSkillMetumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CharacterSkillMetum, error) {
	o := &CharacterSkillMetum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for character_skill_meta")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all CharacterSkillMetum records from the query using the global executor.
func (q characterSkillMetumQuery) AllG(ctx context.Context) (CharacterSkillMetumSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all CharacterSkillMetum records from the query.
func (q characterSkillMetumQuery) All(ctx context.Context, exec boil.ContextExecutor) (CharacterSkillMetumSlice, error) {
	var o []*CharacterSkillMetum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to CharacterSkillMetum slice")
	}

	if len(characterSkillMetumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all CharacterSkillMetum records in the query, and panics on error.
func (q characterSkillMetumQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all CharacterSkillMetum records in the query.
func (q characterSkillMetumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count character_skill_meta rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q characterSkillMetumQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q characterSkillMetumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if character_skill_meta exists")
	}

	return count > 0, nil
}

// Character pointed to by the foreign key.
func (o *CharacterSkillMetum) Character(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`character_id` = ?", o.CharacterID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`users`")

	return query
}

// LoadCharacter allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (characterSkillMetumL) LoadCharacter(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCharacterSkillMetum interface{}, mods queries.Applicator) error {
	var slice []*CharacterSkillMetum
	var object *CharacterSkillMetum

	if singular {
		object = maybeCharacterSkillMetum.(*CharacterSkillMetum)
	} else {
		slice = *maybeCharacterSkillMetum.(*[]*CharacterSkillMetum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &characterSkillMetumR{}
		}
		args = append(args, object.CharacterID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &characterSkillMetumR{}
			}

			for _, a := range args {
				if a == obj.CharacterID {
					continue Outer
				}
			}

			args = append(args, obj.CharacterID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.character_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(characterSkillMetumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Character = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CharacterCharacterSkillMetum = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CharacterID == foreign.CharacterID {
				local.R.Character = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CharacterCharacterSkillMetum = local
				break
			}
		}
	}

	return nil
}

// SetCharacterG of the characterSkillMetum to the related item.
// Sets o.R.Character to related.
// Adds o to related.R.CharacterCharacterSkillMetum.
// Uses the global database handle.
func (o *CharacterSkillMetum) SetCharacterG(ctx context.Context, insert bool, related *User) error {
	return o.SetCharacter(ctx, boil.GetContextDB(), insert, related)
}

// SetCharacter of the characterSkillMetum to the related item.
// Sets o.R.Character to related.
// Adds o to related.R.CharacterCharacterSkillMetum.
func (o *CharacterSkillMetum) SetCharacter(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `character_skill_meta` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"character_id"}),
		strmangle.WhereClause("`", "`", 0, characterSkillMetumPrimaryKeyColumns),
	)
	values := []interface{}{related.CharacterID, o.CharacterID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CharacterID = related.CharacterID
	if o.R == nil {
		o.R = &characterSkillMetumR{
			Character: related,
		}
	} else {
		o.R.Character = related
	}

	if related.R == nil {
		related.R = &userR{
			CharacterCharacterSkillMetum: o,
		}
	} else {
		related.R.CharacterCharacterSkillMetum = o
	}

	return nil
}

// CharacterSkillMeta retrieves all the records using an executor.
func CharacterSkillMeta(mods ...qm.QueryMod) characterSkillMetumQuery {
	mods = append(mods, qm.From("`character_skill_meta`"))
	return characterSkillMetumQuery{NewQuery(mods...)}
}

// FindCharacterSkillMetumG retrieves a single record by ID.
func FindCharacterSkillMetumG(ctx context.Context, characterID uint64, selectCols ...string) (*CharacterSkillMetum, error) {
	return FindCharacterSkillMetum(ctx, boil.GetContextDB(), characterID, selectCols...)
}

// FindCharacterSkillMetum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCharacterSkillMetum(ctx context.Context, exec boil.ContextExecutor, characterID uint64, selectCols ...string) (*CharacterSkillMetum, error) {
	characterSkillMetumObj := &CharacterSkillMetum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `character_skill_meta` where `character_id`=?", sel,
	)

	q := queries.Raw(query, characterID)

	err := q.Bind(ctx, exec, characterSkillMetumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from character_skill_meta")
	}

	if err = characterSkillMetumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return characterSkillMetumObj, err
	}

	return characterSkillMetumObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *CharacterSkillMetum) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CharacterSkillMetum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no character_skill_meta provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(characterSkillMetumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	characterSkillMetumInsertCacheMut.RLock()
	cache, cached := characterSkillMetumInsertCache[key]
	characterSkillMetumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			characterSkillMetumAllColumns,
			characterSkillMetumColumnsWithDefault,
			characterSkillMetumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(characterSkillMetumType, characterSkillMetumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(characterSkillMetumType, characterSkillMetumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `character_skill_meta` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `character_skill_meta` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `character_skill_meta` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, characterSkillMetumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into character_skill_meta")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.CharacterID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for character_skill_meta")
	}

CacheNoHooks:
	if !cached {
		characterSkillMetumInsertCacheMut.Lock()
		characterSkillMetumInsertCache[key] = cache
		characterSkillMetumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single CharacterSkillMetum record using the global executor.
// See Update for more documentation.
func (o *CharacterSkillMetum) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the CharacterSkillMetum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CharacterSkillMetum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	characterSkillMetumUpdateCacheMut.RLock()
	cache, cached := characterSkillMetumUpdateCache[key]
	characterSkillMetumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			characterSkillMetumAllColumns,
			characterSkillMetumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update character_skill_meta, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `character_skill_meta` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, characterSkillMetumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(characterSkillMetumType, characterSkillMetumMapping, append(wl, characterSkillMetumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update character_skill_meta row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for character_skill_meta")
	}

	if !cached {
		characterSkillMetumUpdateCacheMut.Lock()
		characterSkillMetumUpdateCache[key] = cache
		characterSkillMetumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q characterSkillMetumQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q characterSkillMetumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for character_skill_meta")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for character_skill_meta")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CharacterSkillMetumSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CharacterSkillMetumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), characterSkillMetumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `character_skill_meta` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, characterSkillMetumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in characterSkillMetum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all characterSkillMetum")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *CharacterSkillMetum) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLCharacterSkillMetumUniqueColumns = []string{
	"character_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CharacterSkillMetum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no character_skill_meta provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(characterSkillMetumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCharacterSkillMetumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	characterSkillMetumUpsertCacheMut.RLock()
	cache, cached := characterSkillMetumUpsertCache[key]
	characterSkillMetumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			characterSkillMetumAllColumns,
			characterSkillMetumColumnsWithDefault,
			characterSkillMetumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			characterSkillMetumAllColumns,
			characterSkillMetumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("boiler: unable to upsert character_skill_meta, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`character_skill_meta`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `character_skill_meta` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(characterSkillMetumType, characterSkillMetumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(characterSkillMetumType, characterSkillMetumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert for character_skill_meta")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(characterSkillMetumType, characterSkillMetumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to retrieve unique values for character_skill_meta")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for character_skill_meta")
	}

CacheNoHooks:
	if !cached {
		characterSkillMetumUpsertCacheMut.Lock()
		characterSkillMetumUpsertCache[key] = cache
		characterSkillMetumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single CharacterSkillMetum record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *CharacterSkillMetum) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single CharacterSkillMetum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CharacterSkillMetum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no CharacterSkillMetum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), characterSkillMetumPrimaryKeyMapping)
	sql := "DELETE FROM `character_skill_meta` WHERE `character_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from character_skill_meta")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for character_skill_meta")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q characterSkillMetumQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q characterSkillMetumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no characterSkillMetumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from character_skill_meta")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for character_skill_meta")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CharacterSkillMetumSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CharacterSkillMetumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(characterSkillMetumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), characterSkillMetumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `character_skill_meta` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, characterSkillMetumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from characterSkillMetum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for character_skill_meta")
	}

	if len(characterSkillMetumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *CharacterSkillMetum) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("boiler: no CharacterSkillMetum provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CharacterSkillMetum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCharacterSkillMetum(ctx, exec, o.CharacterID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CharacterSkillMetumSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("boiler: empty CharacterSkillMetumSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CharacterSkillMetumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CharacterSkillMetumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), characterSkillMetumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `character_skill_meta`.* FROM `character_skill_meta` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, characterSkillMetumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in CharacterSkillMetumSlice")
	}

	*o = slice

	return nil
}

// CharacterSkillMetumExistsG checks if the CharacterSkillMetum row exists.
func CharacterSkillMetumExistsG(ctx context.Context, characterID uint64) (bool, error) {
	return CharacterSkillMetumExists(ctx, boil.GetContextDB(), characterID)
}

// CharacterSkillMetumExists checks if the CharacterSkillMetum row exists.
func CharacterSkillMetumExists(ctx context.Context, exec boil.ContextExecutor, characterID uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `character_skill_meta` where `character_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, characterID)
	}
	row := exec.QueryRowContext(ctx, sql, characterID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if character_skill_meta exists")
	}

	return exists, nil
}
