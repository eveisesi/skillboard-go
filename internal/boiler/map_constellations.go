// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MapConstellation is an object representing the database table.
type MapConstellation struct {
	ID        uint      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	RegionID  uint      `boil:"region_id" json:"region_id" toml:"region_id" yaml:"region_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *mapConstellationR `boil:"r" json:"r" toml:"r" yaml:"r"`
	L mapConstellationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MapConstellationColumns = struct {
	ID        string
	Name      string
	RegionID  string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Name:      "name",
	RegionID:  "region_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var MapConstellationTableColumns = struct {
	ID        string
	Name      string
	RegionID  string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "map_constellations.id",
	Name:      "map_constellations.name",
	RegionID:  "map_constellations.region_id",
	CreatedAt: "map_constellations.created_at",
	UpdatedAt: "map_constellations.updated_at",
}

// Generated where

var MapConstellationWhere = struct {
	ID        whereHelperuint
	Name      whereHelperstring
	RegionID  whereHelperuint
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperuint{field: "`map_constellations`.`id`"},
	Name:      whereHelperstring{field: "`map_constellations`.`name`"},
	RegionID:  whereHelperuint{field: "`map_constellations`.`region_id`"},
	CreatedAt: whereHelpertime_Time{field: "`map_constellations`.`created_at`"},
	UpdatedAt: whereHelpertime_Time{field: "`map_constellations`.`updated_at`"},
}

// MapConstellationRels is where relationship names are stored.
var MapConstellationRels = struct {
}{}

// mapConstellationR is where relationships are stored.
type mapConstellationR struct {
}

// NewStruct creates a new relationship struct
func (*mapConstellationR) NewStruct() *mapConstellationR {
	return &mapConstellationR{}
}

// mapConstellationL is where Load methods for each relationship are stored.
type mapConstellationL struct{}

var (
	mapConstellationAllColumns            = []string{"id", "name", "region_id", "created_at", "updated_at"}
	mapConstellationColumnsWithoutDefault = []string{"id", "name", "region_id", "created_at", "updated_at"}
	mapConstellationColumnsWithDefault    = []string{}
	mapConstellationPrimaryKeyColumns     = []string{"id"}
)

type (
	// MapConstellationSlice is an alias for a slice of pointers to MapConstellation.
	// This should almost always be used instead of []MapConstellation.
	MapConstellationSlice []*MapConstellation
	// MapConstellationHook is the signature for custom MapConstellation hook methods
	MapConstellationHook func(context.Context, boil.ContextExecutor, *MapConstellation) error

	mapConstellationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mapConstellationType                 = reflect.TypeOf(&MapConstellation{})
	mapConstellationMapping              = queries.MakeStructMapping(mapConstellationType)
	mapConstellationPrimaryKeyMapping, _ = queries.BindMapping(mapConstellationType, mapConstellationMapping, mapConstellationPrimaryKeyColumns)
	mapConstellationInsertCacheMut       sync.RWMutex
	mapConstellationInsertCache          = make(map[string]insertCache)
	mapConstellationUpdateCacheMut       sync.RWMutex
	mapConstellationUpdateCache          = make(map[string]updateCache)
	mapConstellationUpsertCacheMut       sync.RWMutex
	mapConstellationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mapConstellationBeforeInsertHooks []MapConstellationHook
var mapConstellationBeforeUpdateHooks []MapConstellationHook
var mapConstellationBeforeDeleteHooks []MapConstellationHook
var mapConstellationBeforeUpsertHooks []MapConstellationHook

var mapConstellationAfterInsertHooks []MapConstellationHook
var mapConstellationAfterSelectHooks []MapConstellationHook
var mapConstellationAfterUpdateHooks []MapConstellationHook
var mapConstellationAfterDeleteHooks []MapConstellationHook
var mapConstellationAfterUpsertHooks []MapConstellationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MapConstellation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mapConstellationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MapConstellation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mapConstellationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MapConstellation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mapConstellationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MapConstellation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mapConstellationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MapConstellation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mapConstellationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MapConstellation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mapConstellationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MapConstellation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mapConstellationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MapConstellation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mapConstellationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MapConstellation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mapConstellationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMapConstellationHook registers your hook function for all future operations.
func AddMapConstellationHook(hookPoint boil.HookPoint, mapConstellationHook MapConstellationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		mapConstellationBeforeInsertHooks = append(mapConstellationBeforeInsertHooks, mapConstellationHook)
	case boil.BeforeUpdateHook:
		mapConstellationBeforeUpdateHooks = append(mapConstellationBeforeUpdateHooks, mapConstellationHook)
	case boil.BeforeDeleteHook:
		mapConstellationBeforeDeleteHooks = append(mapConstellationBeforeDeleteHooks, mapConstellationHook)
	case boil.BeforeUpsertHook:
		mapConstellationBeforeUpsertHooks = append(mapConstellationBeforeUpsertHooks, mapConstellationHook)
	case boil.AfterInsertHook:
		mapConstellationAfterInsertHooks = append(mapConstellationAfterInsertHooks, mapConstellationHook)
	case boil.AfterSelectHook:
		mapConstellationAfterSelectHooks = append(mapConstellationAfterSelectHooks, mapConstellationHook)
	case boil.AfterUpdateHook:
		mapConstellationAfterUpdateHooks = append(mapConstellationAfterUpdateHooks, mapConstellationHook)
	case boil.AfterDeleteHook:
		mapConstellationAfterDeleteHooks = append(mapConstellationAfterDeleteHooks, mapConstellationHook)
	case boil.AfterUpsertHook:
		mapConstellationAfterUpsertHooks = append(mapConstellationAfterUpsertHooks, mapConstellationHook)
	}
}

// OneG returns a single mapConstellation record from the query using the global executor.
func (q mapConstellationQuery) OneG(ctx context.Context) (*MapConstellation, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single mapConstellation record from the query.
func (q mapConstellationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MapConstellation, error) {
	o := &MapConstellation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for map_constellations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all MapConstellation records from the query using the global executor.
func (q mapConstellationQuery) AllG(ctx context.Context) (MapConstellationSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all MapConstellation records from the query.
func (q mapConstellationQuery) All(ctx context.Context, exec boil.ContextExecutor) (MapConstellationSlice, error) {
	var o []*MapConstellation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to MapConstellation slice")
	}

	if len(mapConstellationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all MapConstellation records in the query, and panics on error.
func (q mapConstellationQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all MapConstellation records in the query.
func (q mapConstellationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count map_constellations rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q mapConstellationQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q mapConstellationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if map_constellations exists")
	}

	return count > 0, nil
}

// MapConstellations retrieves all the records using an executor.
func MapConstellations(mods ...qm.QueryMod) mapConstellationQuery {
	mods = append(mods, qm.From("`map_constellations`"))
	return mapConstellationQuery{NewQuery(mods...)}
}

// FindMapConstellationG retrieves a single record by ID.
func FindMapConstellationG(ctx context.Context, iD uint, selectCols ...string) (*MapConstellation, error) {
	return FindMapConstellation(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindMapConstellation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMapConstellation(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*MapConstellation, error) {
	mapConstellationObj := &MapConstellation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `map_constellations` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, mapConstellationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from map_constellations")
	}

	if err = mapConstellationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return mapConstellationObj, err
	}

	return mapConstellationObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *MapConstellation) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MapConstellation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no map_constellations provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mapConstellationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mapConstellationInsertCacheMut.RLock()
	cache, cached := mapConstellationInsertCache[key]
	mapConstellationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mapConstellationAllColumns,
			mapConstellationColumnsWithDefault,
			mapConstellationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mapConstellationType, mapConstellationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mapConstellationType, mapConstellationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `map_constellations` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `map_constellations` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `map_constellations` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, mapConstellationPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into map_constellations")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for map_constellations")
	}

CacheNoHooks:
	if !cached {
		mapConstellationInsertCacheMut.Lock()
		mapConstellationInsertCache[key] = cache
		mapConstellationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single MapConstellation record using the global executor.
// See Update for more documentation.
func (o *MapConstellation) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the MapConstellation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MapConstellation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mapConstellationUpdateCacheMut.RLock()
	cache, cached := mapConstellationUpdateCache[key]
	mapConstellationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mapConstellationAllColumns,
			mapConstellationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update map_constellations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `map_constellations` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, mapConstellationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mapConstellationType, mapConstellationMapping, append(wl, mapConstellationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update map_constellations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for map_constellations")
	}

	if !cached {
		mapConstellationUpdateCacheMut.Lock()
		mapConstellationUpdateCache[key] = cache
		mapConstellationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q mapConstellationQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q mapConstellationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for map_constellations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for map_constellations")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MapConstellationSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MapConstellationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mapConstellationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `map_constellations` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mapConstellationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in mapConstellation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all mapConstellation")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *MapConstellation) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLMapConstellationUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MapConstellation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no map_constellations provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mapConstellationColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLMapConstellationUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mapConstellationUpsertCacheMut.RLock()
	cache, cached := mapConstellationUpsertCache[key]
	mapConstellationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mapConstellationAllColumns,
			mapConstellationColumnsWithDefault,
			mapConstellationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			mapConstellationAllColumns,
			mapConstellationPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("boiler: unable to upsert map_constellations, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`map_constellations`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `map_constellations` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(mapConstellationType, mapConstellationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mapConstellationType, mapConstellationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert for map_constellations")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(mapConstellationType, mapConstellationMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to retrieve unique values for map_constellations")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for map_constellations")
	}

CacheNoHooks:
	if !cached {
		mapConstellationUpsertCacheMut.Lock()
		mapConstellationUpsertCache[key] = cache
		mapConstellationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single MapConstellation record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *MapConstellation) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single MapConstellation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MapConstellation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no MapConstellation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mapConstellationPrimaryKeyMapping)
	sql := "DELETE FROM `map_constellations` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from map_constellations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for map_constellations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q mapConstellationQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q mapConstellationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no mapConstellationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from map_constellations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for map_constellations")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o MapConstellationSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MapConstellationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mapConstellationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mapConstellationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `map_constellations` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mapConstellationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mapConstellation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for map_constellations")
	}

	if len(mapConstellationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *MapConstellation) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("boiler: no MapConstellation provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MapConstellation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMapConstellation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MapConstellationSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("boiler: empty MapConstellationSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MapConstellationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MapConstellationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mapConstellationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `map_constellations`.* FROM `map_constellations` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mapConstellationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in MapConstellationSlice")
	}

	*o = slice

	return nil
}

// MapConstellationExistsG checks if the MapConstellation row exists.
func MapConstellationExistsG(ctx context.Context, iD uint) (bool, error) {
	return MapConstellationExists(ctx, boil.GetContextDB(), iD)
}

// MapConstellationExists checks if the MapConstellation row exists.
func MapConstellationExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `map_constellations` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if map_constellations exists")
	}

	return exists, nil
}
