// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/gofrs/uuid"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// User is an object representing the database table.
type User struct {
	ID                uuid.UUID   `boil:"id" json:"id" toml:"id" yaml:"id"`
	CharacterID       uint64      `boil:"character_id" json:"character_id" toml:"character_id" yaml:"character_id"`
	AccessToken       string      `boil:"access_token" json:"access_token" toml:"access_token" yaml:"access_token"`
	RefreshToken      string      `boil:"refresh_token" json:"refresh_token" toml:"refresh_token" yaml:"refresh_token"`
	Expires           time.Time   `boil:"expires" json:"expires" toml:"expires" yaml:"expires"`
	OwnerHash         string      `boil:"owner_hash" json:"owner_hash" toml:"owner_hash" yaml:"owner_hash"`
	Scopes            types.JSON  `boil:"scopes" json:"scopes" toml:"scopes" yaml:"scopes"`
	IsNew             bool        `boil:"is_new" json:"is_new" toml:"is_new" yaml:"is_new"`
	Disabled          uint8       `boil:"disabled" json:"disabled" toml:"disabled" yaml:"disabled"`
	DisabledReason    null.String `boil:"disabled_reason" json:"disabled_reason,omitempty" toml:"disabled_reason" yaml:"disabled_reason,omitempty"`
	DisabledTimestamp null.Time   `boil:"disabled_timestamp" json:"disabled_timestamp,omitempty" toml:"disabled_timestamp" yaml:"disabled_timestamp,omitempty"`
	LastLogin         time.Time   `boil:"last_login" json:"last_login" toml:"last_login" yaml:"last_login"`
	LastProcessed     null.Time   `boil:"last_processed" json:"last_processed,omitempty" toml:"last_processed" yaml:"last_processed,omitempty"`
	CreatedAt         time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt         time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *userR `boil:"r" json:"r" toml:"r" yaml:"r"`
	L userL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserColumns = struct {
	ID                string
	CharacterID       string
	AccessToken       string
	RefreshToken      string
	Expires           string
	OwnerHash         string
	Scopes            string
	IsNew             string
	Disabled          string
	DisabledReason    string
	DisabledTimestamp string
	LastLogin         string
	LastProcessed     string
	CreatedAt         string
	UpdatedAt         string
}{
	ID:                "id",
	CharacterID:       "character_id",
	AccessToken:       "access_token",
	RefreshToken:      "refresh_token",
	Expires:           "expires",
	OwnerHash:         "owner_hash",
	Scopes:            "scopes",
	IsNew:             "is_new",
	Disabled:          "disabled",
	DisabledReason:    "disabled_reason",
	DisabledTimestamp: "disabled_timestamp",
	LastLogin:         "last_login",
	LastProcessed:     "last_processed",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
}

var UserTableColumns = struct {
	ID                string
	CharacterID       string
	AccessToken       string
	RefreshToken      string
	Expires           string
	OwnerHash         string
	Scopes            string
	IsNew             string
	Disabled          string
	DisabledReason    string
	DisabledTimestamp string
	LastLogin         string
	LastProcessed     string
	CreatedAt         string
	UpdatedAt         string
}{
	ID:                "users.id",
	CharacterID:       "users.character_id",
	AccessToken:       "users.access_token",
	RefreshToken:      "users.refresh_token",
	Expires:           "users.expires",
	OwnerHash:         "users.owner_hash",
	Scopes:            "users.scopes",
	IsNew:             "users.is_new",
	Disabled:          "users.disabled",
	DisabledReason:    "users.disabled_reason",
	DisabledTimestamp: "users.disabled_timestamp",
	LastLogin:         "users.last_login",
	LastProcessed:     "users.last_processed",
	CreatedAt:         "users.created_at",
	UpdatedAt:         "users.updated_at",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var UserWhere = struct {
	ID                whereHelperuuid_UUID
	CharacterID       whereHelperuint64
	AccessToken       whereHelperstring
	RefreshToken      whereHelperstring
	Expires           whereHelpertime_Time
	OwnerHash         whereHelperstring
	Scopes            whereHelpertypes_JSON
	IsNew             whereHelperbool
	Disabled          whereHelperuint8
	DisabledReason    whereHelpernull_String
	DisabledTimestamp whereHelpernull_Time
	LastLogin         whereHelpertime_Time
	LastProcessed     whereHelpernull_Time
	CreatedAt         whereHelpertime_Time
	UpdatedAt         whereHelpertime_Time
}{
	ID:                whereHelperuuid_UUID{field: "`users`.`id`"},
	CharacterID:       whereHelperuint64{field: "`users`.`character_id`"},
	AccessToken:       whereHelperstring{field: "`users`.`access_token`"},
	RefreshToken:      whereHelperstring{field: "`users`.`refresh_token`"},
	Expires:           whereHelpertime_Time{field: "`users`.`expires`"},
	OwnerHash:         whereHelperstring{field: "`users`.`owner_hash`"},
	Scopes:            whereHelpertypes_JSON{field: "`users`.`scopes`"},
	IsNew:             whereHelperbool{field: "`users`.`is_new`"},
	Disabled:          whereHelperuint8{field: "`users`.`disabled`"},
	DisabledReason:    whereHelpernull_String{field: "`users`.`disabled_reason`"},
	DisabledTimestamp: whereHelpernull_Time{field: "`users`.`disabled_timestamp`"},
	LastLogin:         whereHelpertime_Time{field: "`users`.`last_login`"},
	LastProcessed:     whereHelpernull_Time{field: "`users`.`last_processed`"},
	CreatedAt:         whereHelpertime_Time{field: "`users`.`created_at`"},
	UpdatedAt:         whereHelpertime_Time{field: "`users`.`updated_at`"},
}

// UserRels is where relationship names are stored.
var UserRels = struct {
	CharacterCharacterAttribute    string
	CharacterCharacterCloneMetum   string
	CharacterCharacterHomeClone    string
	CharacterCharacterSkillMetum   string
	UserSetting                    string
	CharacterCharacterContacts     string
	CharacterCharacterFlyableShips string
	CharacterCharacterImplants     string
	CharacterCharacterJumpClones   string
	CharacterCharacterSkillqueues  string
	CharacterCharacterSkills       string
}{
	CharacterCharacterAttribute:    "CharacterCharacterAttribute",
	CharacterCharacterCloneMetum:   "CharacterCharacterCloneMetum",
	CharacterCharacterHomeClone:    "CharacterCharacterHomeClone",
	CharacterCharacterSkillMetum:   "CharacterCharacterSkillMetum",
	UserSetting:                    "UserSetting",
	CharacterCharacterContacts:     "CharacterCharacterContacts",
	CharacterCharacterFlyableShips: "CharacterCharacterFlyableShips",
	CharacterCharacterImplants:     "CharacterCharacterImplants",
	CharacterCharacterJumpClones:   "CharacterCharacterJumpClones",
	CharacterCharacterSkillqueues:  "CharacterCharacterSkillqueues",
	CharacterCharacterSkills:       "CharacterCharacterSkills",
}

// userR is where relationships are stored.
type userR struct {
	CharacterCharacterAttribute    *CharacterAttribute       `boil:"CharacterCharacterAttribute" json:"CharacterCharacterAttribute" toml:"CharacterCharacterAttribute" yaml:"CharacterCharacterAttribute"`
	CharacterCharacterCloneMetum   *CharacterCloneMetum      `boil:"CharacterCharacterCloneMetum" json:"CharacterCharacterCloneMetum" toml:"CharacterCharacterCloneMetum" yaml:"CharacterCharacterCloneMetum"`
	CharacterCharacterHomeClone    *CharacterHomeClone       `boil:"CharacterCharacterHomeClone" json:"CharacterCharacterHomeClone" toml:"CharacterCharacterHomeClone" yaml:"CharacterCharacterHomeClone"`
	CharacterCharacterSkillMetum   *CharacterSkillMetum      `boil:"CharacterCharacterSkillMetum" json:"CharacterCharacterSkillMetum" toml:"CharacterCharacterSkillMetum" yaml:"CharacterCharacterSkillMetum"`
	UserSetting                    *UserSetting              `boil:"UserSetting" json:"UserSetting" toml:"UserSetting" yaml:"UserSetting"`
	CharacterCharacterContacts     CharacterContactSlice     `boil:"CharacterCharacterContacts" json:"CharacterCharacterContacts" toml:"CharacterCharacterContacts" yaml:"CharacterCharacterContacts"`
	CharacterCharacterFlyableShips CharacterFlyableShipSlice `boil:"CharacterCharacterFlyableShips" json:"CharacterCharacterFlyableShips" toml:"CharacterCharacterFlyableShips" yaml:"CharacterCharacterFlyableShips"`
	CharacterCharacterImplants     CharacterImplantSlice     `boil:"CharacterCharacterImplants" json:"CharacterCharacterImplants" toml:"CharacterCharacterImplants" yaml:"CharacterCharacterImplants"`
	CharacterCharacterJumpClones   CharacterJumpCloneSlice   `boil:"CharacterCharacterJumpClones" json:"CharacterCharacterJumpClones" toml:"CharacterCharacterJumpClones" yaml:"CharacterCharacterJumpClones"`
	CharacterCharacterSkillqueues  CharacterSkillqueueSlice  `boil:"CharacterCharacterSkillqueues" json:"CharacterCharacterSkillqueues" toml:"CharacterCharacterSkillqueues" yaml:"CharacterCharacterSkillqueues"`
	CharacterCharacterSkills       CharacterSkillSlice       `boil:"CharacterCharacterSkills" json:"CharacterCharacterSkills" toml:"CharacterCharacterSkills" yaml:"CharacterCharacterSkills"`
}

// NewStruct creates a new relationship struct
func (*userR) NewStruct() *userR {
	return &userR{}
}

// userL is where Load methods for each relationship are stored.
type userL struct{}

var (
	userAllColumns            = []string{"id", "character_id", "access_token", "refresh_token", "expires", "owner_hash", "scopes", "is_new", "disabled", "disabled_reason", "disabled_timestamp", "last_login", "last_processed", "created_at", "updated_at"}
	userColumnsWithoutDefault = []string{"id", "character_id", "access_token", "refresh_token", "expires", "owner_hash", "scopes", "disabled_reason", "disabled_timestamp", "last_login", "last_processed", "created_at", "updated_at"}
	userColumnsWithDefault    = []string{"is_new", "disabled"}
	userPrimaryKeyColumns     = []string{"id"}
)

type (
	// UserSlice is an alias for a slice of pointers to User.
	// This should almost always be used instead of []User.
	UserSlice []*User
	// UserHook is the signature for custom User hook methods
	UserHook func(context.Context, boil.ContextExecutor, *User) error

	userQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userType                 = reflect.TypeOf(&User{})
	userMapping              = queries.MakeStructMapping(userType)
	userPrimaryKeyMapping, _ = queries.BindMapping(userType, userMapping, userPrimaryKeyColumns)
	userInsertCacheMut       sync.RWMutex
	userInsertCache          = make(map[string]insertCache)
	userUpdateCacheMut       sync.RWMutex
	userUpdateCache          = make(map[string]updateCache)
	userUpsertCacheMut       sync.RWMutex
	userUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userBeforeInsertHooks []UserHook
var userBeforeUpdateHooks []UserHook
var userBeforeDeleteHooks []UserHook
var userBeforeUpsertHooks []UserHook

var userAfterInsertHooks []UserHook
var userAfterSelectHooks []UserHook
var userAfterUpdateHooks []UserHook
var userAfterDeleteHooks []UserHook
var userAfterUpsertHooks []UserHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *User) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *User) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *User) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *User) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *User) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *User) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *User) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *User) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *User) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserHook registers your hook function for all future operations.
func AddUserHook(hookPoint boil.HookPoint, userHook UserHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userBeforeInsertHooks = append(userBeforeInsertHooks, userHook)
	case boil.BeforeUpdateHook:
		userBeforeUpdateHooks = append(userBeforeUpdateHooks, userHook)
	case boil.BeforeDeleteHook:
		userBeforeDeleteHooks = append(userBeforeDeleteHooks, userHook)
	case boil.BeforeUpsertHook:
		userBeforeUpsertHooks = append(userBeforeUpsertHooks, userHook)
	case boil.AfterInsertHook:
		userAfterInsertHooks = append(userAfterInsertHooks, userHook)
	case boil.AfterSelectHook:
		userAfterSelectHooks = append(userAfterSelectHooks, userHook)
	case boil.AfterUpdateHook:
		userAfterUpdateHooks = append(userAfterUpdateHooks, userHook)
	case boil.AfterDeleteHook:
		userAfterDeleteHooks = append(userAfterDeleteHooks, userHook)
	case boil.AfterUpsertHook:
		userAfterUpsertHooks = append(userAfterUpsertHooks, userHook)
	}
}

// OneG returns a single user record from the query using the global executor.
func (q userQuery) OneG(ctx context.Context) (*User, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single user record from the query.
func (q userQuery) One(ctx context.Context, exec boil.ContextExecutor) (*User, error) {
	o := &User{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for users")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all User records from the query using the global executor.
func (q userQuery) AllG(ctx context.Context) (UserSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all User records from the query.
func (q userQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserSlice, error) {
	var o []*User

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to User slice")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all User records in the query, and panics on error.
func (q userQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all User records in the query.
func (q userQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count users rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q userQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q userQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if users exists")
	}

	return count > 0, nil
}

// CharacterCharacterAttribute pointed to by the foreign key.
func (o *User) CharacterCharacterAttribute(mods ...qm.QueryMod) characterAttributeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`character_id` = ?", o.CharacterID),
	}

	queryMods = append(queryMods, mods...)

	query := CharacterAttributes(queryMods...)
	queries.SetFrom(query.Query, "`character_attributes`")

	return query
}

// CharacterCharacterCloneMetum pointed to by the foreign key.
func (o *User) CharacterCharacterCloneMetum(mods ...qm.QueryMod) characterCloneMetumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`character_id` = ?", o.CharacterID),
	}

	queryMods = append(queryMods, mods...)

	query := CharacterCloneMeta(queryMods...)
	queries.SetFrom(query.Query, "`character_clone_meta`")

	return query
}

// CharacterCharacterHomeClone pointed to by the foreign key.
func (o *User) CharacterCharacterHomeClone(mods ...qm.QueryMod) characterHomeCloneQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`character_id` = ?", o.CharacterID),
	}

	queryMods = append(queryMods, mods...)

	query := CharacterHomeClones(queryMods...)
	queries.SetFrom(query.Query, "`character_home_clone`")

	return query
}

// CharacterCharacterSkillMetum pointed to by the foreign key.
func (o *User) CharacterCharacterSkillMetum(mods ...qm.QueryMod) characterSkillMetumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`character_id` = ?", o.CharacterID),
	}

	queryMods = append(queryMods, mods...)

	query := CharacterSkillMeta(queryMods...)
	queries.SetFrom(query.Query, "`character_skill_meta`")

	return query
}

// UserSetting pointed to by the foreign key.
func (o *User) UserSetting(mods ...qm.QueryMod) userSettingQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`user_id` = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := UserSettings(queryMods...)
	queries.SetFrom(query.Query, "`user_settings`")

	return query
}

// CharacterCharacterContacts retrieves all the character_contact's CharacterContacts with an executor via character_id column.
func (o *User) CharacterCharacterContacts(mods ...qm.QueryMod) characterContactQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`character_contacts`.`character_id`=?", o.CharacterID),
	)

	query := CharacterContacts(queryMods...)
	queries.SetFrom(query.Query, "`character_contacts`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`character_contacts`.*"})
	}

	return query
}

// CharacterCharacterFlyableShips retrieves all the character_flyable_ship's CharacterFlyableShips with an executor via character_id column.
func (o *User) CharacterCharacterFlyableShips(mods ...qm.QueryMod) characterFlyableShipQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`character_flyable_ships`.`character_id`=?", o.CharacterID),
	)

	query := CharacterFlyableShips(queryMods...)
	queries.SetFrom(query.Query, "`character_flyable_ships`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`character_flyable_ships`.*"})
	}

	return query
}

// CharacterCharacterImplants retrieves all the character_implant's CharacterImplants with an executor via character_id column.
func (o *User) CharacterCharacterImplants(mods ...qm.QueryMod) characterImplantQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`character_implants`.`character_id`=?", o.CharacterID),
	)

	query := CharacterImplants(queryMods...)
	queries.SetFrom(query.Query, "`character_implants`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`character_implants`.*"})
	}

	return query
}

// CharacterCharacterJumpClones retrieves all the character_jump_clone's CharacterJumpClones with an executor via character_id column.
func (o *User) CharacterCharacterJumpClones(mods ...qm.QueryMod) characterJumpCloneQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`character_jump_clones`.`character_id`=?", o.CharacterID),
	)

	query := CharacterJumpClones(queryMods...)
	queries.SetFrom(query.Query, "`character_jump_clones`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`character_jump_clones`.*"})
	}

	return query
}

// CharacterCharacterSkillqueues retrieves all the character_skillqueue's CharacterSkillqueues with an executor via character_id column.
func (o *User) CharacterCharacterSkillqueues(mods ...qm.QueryMod) characterSkillqueueQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`character_skillqueue`.`character_id`=?", o.CharacterID),
	)

	query := CharacterSkillqueues(queryMods...)
	queries.SetFrom(query.Query, "`character_skillqueue`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`character_skillqueue`.*"})
	}

	return query
}

// CharacterCharacterSkills retrieves all the character_skill's CharacterSkills with an executor via character_id column.
func (o *User) CharacterCharacterSkills(mods ...qm.QueryMod) characterSkillQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`character_skills`.`character_id`=?", o.CharacterID),
	)

	query := CharacterSkills(queryMods...)
	queries.SetFrom(query.Query, "`character_skills`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`character_skills`.*"})
	}

	return query
}

// LoadCharacterCharacterAttribute allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (userL) LoadCharacterCharacterAttribute(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.CharacterID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.CharacterID {
					continue Outer
				}
			}

			args = append(args, obj.CharacterID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`character_attributes`),
		qm.WhereIn(`character_attributes.character_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CharacterAttribute")
	}

	var resultSlice []*CharacterAttribute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CharacterAttribute")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for character_attributes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for character_attributes")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CharacterCharacterAttribute = foreign
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CharacterID == foreign.CharacterID {
				local.R.CharacterCharacterAttribute = foreign
				break
			}
		}
	}

	return nil
}

// LoadCharacterCharacterCloneMetum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (userL) LoadCharacterCharacterCloneMetum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.CharacterID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.CharacterID {
					continue Outer
				}
			}

			args = append(args, obj.CharacterID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`character_clone_meta`),
		qm.WhereIn(`character_clone_meta.character_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CharacterCloneMetum")
	}

	var resultSlice []*CharacterCloneMetum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CharacterCloneMetum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for character_clone_meta")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for character_clone_meta")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CharacterCharacterCloneMetum = foreign
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CharacterID == foreign.CharacterID {
				local.R.CharacterCharacterCloneMetum = foreign
				break
			}
		}
	}

	return nil
}

// LoadCharacterCharacterHomeClone allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (userL) LoadCharacterCharacterHomeClone(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.CharacterID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.CharacterID {
					continue Outer
				}
			}

			args = append(args, obj.CharacterID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`character_home_clone`),
		qm.WhereIn(`character_home_clone.character_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CharacterHomeClone")
	}

	var resultSlice []*CharacterHomeClone
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CharacterHomeClone")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for character_home_clone")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for character_home_clone")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CharacterCharacterHomeClone = foreign
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CharacterID == foreign.CharacterID {
				local.R.CharacterCharacterHomeClone = foreign
				break
			}
		}
	}

	return nil
}

// LoadCharacterCharacterSkillMetum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (userL) LoadCharacterCharacterSkillMetum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.CharacterID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.CharacterID {
					continue Outer
				}
			}

			args = append(args, obj.CharacterID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`character_skill_meta`),
		qm.WhereIn(`character_skill_meta.character_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CharacterSkillMetum")
	}

	var resultSlice []*CharacterSkillMetum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CharacterSkillMetum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for character_skill_meta")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for character_skill_meta")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CharacterCharacterSkillMetum = foreign
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CharacterID == foreign.CharacterID {
				local.R.CharacterCharacterSkillMetum = foreign
				break
			}
		}
	}

	return nil
}

// LoadUserSetting allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (userL) LoadUserSetting(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_settings`),
		qm.WhereIn(`user_settings.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserSetting")
	}

	var resultSlice []*UserSetting
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserSetting")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_settings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_settings")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserSetting = foreign
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ID, foreign.UserID) {
				local.R.UserSetting = foreign
				break
			}
		}
	}

	return nil
}

// LoadCharacterCharacterContacts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadCharacterCharacterContacts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.CharacterID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.CharacterID {
					continue Outer
				}
			}

			args = append(args, obj.CharacterID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`character_contacts`),
		qm.WhereIn(`character_contacts.character_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load character_contacts")
	}

	var resultSlice []*CharacterContact
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice character_contacts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on character_contacts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for character_contacts")
	}

	if len(characterContactAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CharacterCharacterContacts = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.CharacterID == foreign.CharacterID {
				local.R.CharacterCharacterContacts = append(local.R.CharacterCharacterContacts, foreign)
				break
			}
		}
	}

	return nil
}

// LoadCharacterCharacterFlyableShips allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadCharacterCharacterFlyableShips(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.CharacterID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.CharacterID {
					continue Outer
				}
			}

			args = append(args, obj.CharacterID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`character_flyable_ships`),
		qm.WhereIn(`character_flyable_ships.character_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load character_flyable_ships")
	}

	var resultSlice []*CharacterFlyableShip
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice character_flyable_ships")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on character_flyable_ships")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for character_flyable_ships")
	}

	if len(characterFlyableShipAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CharacterCharacterFlyableShips = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.CharacterID == foreign.CharacterID {
				local.R.CharacterCharacterFlyableShips = append(local.R.CharacterCharacterFlyableShips, foreign)
				break
			}
		}
	}

	return nil
}

// LoadCharacterCharacterImplants allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadCharacterCharacterImplants(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.CharacterID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.CharacterID {
					continue Outer
				}
			}

			args = append(args, obj.CharacterID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`character_implants`),
		qm.WhereIn(`character_implants.character_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load character_implants")
	}

	var resultSlice []*CharacterImplant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice character_implants")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on character_implants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for character_implants")
	}

	if len(characterImplantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CharacterCharacterImplants = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.CharacterID == foreign.CharacterID {
				local.R.CharacterCharacterImplants = append(local.R.CharacterCharacterImplants, foreign)
				break
			}
		}
	}

	return nil
}

// LoadCharacterCharacterJumpClones allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadCharacterCharacterJumpClones(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.CharacterID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.CharacterID {
					continue Outer
				}
			}

			args = append(args, obj.CharacterID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`character_jump_clones`),
		qm.WhereIn(`character_jump_clones.character_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load character_jump_clones")
	}

	var resultSlice []*CharacterJumpClone
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice character_jump_clones")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on character_jump_clones")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for character_jump_clones")
	}

	if len(characterJumpCloneAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CharacterCharacterJumpClones = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.CharacterID == foreign.CharacterID {
				local.R.CharacterCharacterJumpClones = append(local.R.CharacterCharacterJumpClones, foreign)
				break
			}
		}
	}

	return nil
}

// LoadCharacterCharacterSkillqueues allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadCharacterCharacterSkillqueues(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.CharacterID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.CharacterID {
					continue Outer
				}
			}

			args = append(args, obj.CharacterID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`character_skillqueue`),
		qm.WhereIn(`character_skillqueue.character_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load character_skillqueue")
	}

	var resultSlice []*CharacterSkillqueue
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice character_skillqueue")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on character_skillqueue")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for character_skillqueue")
	}

	if len(characterSkillqueueAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CharacterCharacterSkillqueues = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.CharacterID == foreign.CharacterID {
				local.R.CharacterCharacterSkillqueues = append(local.R.CharacterCharacterSkillqueues, foreign)
				break
			}
		}
	}

	return nil
}

// LoadCharacterCharacterSkills allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadCharacterCharacterSkills(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.CharacterID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.CharacterID {
					continue Outer
				}
			}

			args = append(args, obj.CharacterID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`character_skills`),
		qm.WhereIn(`character_skills.character_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load character_skills")
	}

	var resultSlice []*CharacterSkill
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice character_skills")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on character_skills")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for character_skills")
	}

	if len(characterSkillAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CharacterCharacterSkills = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.CharacterID == foreign.CharacterID {
				local.R.CharacterCharacterSkills = append(local.R.CharacterCharacterSkills, foreign)
				break
			}
		}
	}

	return nil
}

// SetCharacterCharacterAttributeG of the user to the related item.
// Sets o.R.CharacterCharacterAttribute to related.
// Adds o to related.R.Character.
// Uses the global database handle.
func (o *User) SetCharacterCharacterAttributeG(ctx context.Context, insert bool, related *CharacterAttribute) error {
	return o.SetCharacterCharacterAttribute(ctx, boil.GetContextDB(), insert, related)
}

// SetCharacterCharacterAttribute of the user to the related item.
// Sets o.R.CharacterCharacterAttribute to related.
// Adds o to related.R.Character.
func (o *User) SetCharacterCharacterAttribute(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CharacterAttribute) error {
	var err error

	if insert {
		related.CharacterID = o.CharacterID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE `character_attributes` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, []string{"character_id"}),
			strmangle.WhereClause("`", "`", 0, characterAttributePrimaryKeyColumns),
		)
		values := []interface{}{o.CharacterID, related.CharacterID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.CharacterID = o.CharacterID

	}

	if o.R == nil {
		o.R = &userR{
			CharacterCharacterAttribute: related,
		}
	} else {
		o.R.CharacterCharacterAttribute = related
	}

	if related.R == nil {
		related.R = &characterAttributeR{
			Character: o,
		}
	} else {
		related.R.Character = o
	}
	return nil
}

// SetCharacterCharacterCloneMetumG of the user to the related item.
// Sets o.R.CharacterCharacterCloneMetum to related.
// Adds o to related.R.Character.
// Uses the global database handle.
func (o *User) SetCharacterCharacterCloneMetumG(ctx context.Context, insert bool, related *CharacterCloneMetum) error {
	return o.SetCharacterCharacterCloneMetum(ctx, boil.GetContextDB(), insert, related)
}

// SetCharacterCharacterCloneMetum of the user to the related item.
// Sets o.R.CharacterCharacterCloneMetum to related.
// Adds o to related.R.Character.
func (o *User) SetCharacterCharacterCloneMetum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CharacterCloneMetum) error {
	var err error

	if insert {
		related.CharacterID = o.CharacterID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE `character_clone_meta` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, []string{"character_id"}),
			strmangle.WhereClause("`", "`", 0, characterCloneMetumPrimaryKeyColumns),
		)
		values := []interface{}{o.CharacterID, related.CharacterID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.CharacterID = o.CharacterID

	}

	if o.R == nil {
		o.R = &userR{
			CharacterCharacterCloneMetum: related,
		}
	} else {
		o.R.CharacterCharacterCloneMetum = related
	}

	if related.R == nil {
		related.R = &characterCloneMetumR{
			Character: o,
		}
	} else {
		related.R.Character = o
	}
	return nil
}

// SetCharacterCharacterHomeCloneG of the user to the related item.
// Sets o.R.CharacterCharacterHomeClone to related.
// Adds o to related.R.Character.
// Uses the global database handle.
func (o *User) SetCharacterCharacterHomeCloneG(ctx context.Context, insert bool, related *CharacterHomeClone) error {
	return o.SetCharacterCharacterHomeClone(ctx, boil.GetContextDB(), insert, related)
}

// SetCharacterCharacterHomeClone of the user to the related item.
// Sets o.R.CharacterCharacterHomeClone to related.
// Adds o to related.R.Character.
func (o *User) SetCharacterCharacterHomeClone(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CharacterHomeClone) error {
	var err error

	if insert {
		related.CharacterID = o.CharacterID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE `character_home_clone` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, []string{"character_id"}),
			strmangle.WhereClause("`", "`", 0, characterHomeClonePrimaryKeyColumns),
		)
		values := []interface{}{o.CharacterID, related.CharacterID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.CharacterID = o.CharacterID

	}

	if o.R == nil {
		o.R = &userR{
			CharacterCharacterHomeClone: related,
		}
	} else {
		o.R.CharacterCharacterHomeClone = related
	}

	if related.R == nil {
		related.R = &characterHomeCloneR{
			Character: o,
		}
	} else {
		related.R.Character = o
	}
	return nil
}

// SetCharacterCharacterSkillMetumG of the user to the related item.
// Sets o.R.CharacterCharacterSkillMetum to related.
// Adds o to related.R.Character.
// Uses the global database handle.
func (o *User) SetCharacterCharacterSkillMetumG(ctx context.Context, insert bool, related *CharacterSkillMetum) error {
	return o.SetCharacterCharacterSkillMetum(ctx, boil.GetContextDB(), insert, related)
}

// SetCharacterCharacterSkillMetum of the user to the related item.
// Sets o.R.CharacterCharacterSkillMetum to related.
// Adds o to related.R.Character.
func (o *User) SetCharacterCharacterSkillMetum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CharacterSkillMetum) error {
	var err error

	if insert {
		related.CharacterID = o.CharacterID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE `character_skill_meta` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, []string{"character_id"}),
			strmangle.WhereClause("`", "`", 0, characterSkillMetumPrimaryKeyColumns),
		)
		values := []interface{}{o.CharacterID, related.CharacterID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.CharacterID = o.CharacterID

	}

	if o.R == nil {
		o.R = &userR{
			CharacterCharacterSkillMetum: related,
		}
	} else {
		o.R.CharacterCharacterSkillMetum = related
	}

	if related.R == nil {
		related.R = &characterSkillMetumR{
			Character: o,
		}
	} else {
		related.R.Character = o
	}
	return nil
}

// SetUserSettingG of the user to the related item.
// Sets o.R.UserSetting to related.
// Adds o to related.R.User.
// Uses the global database handle.
func (o *User) SetUserSettingG(ctx context.Context, insert bool, related *UserSetting) error {
	return o.SetUserSetting(ctx, boil.GetContextDB(), insert, related)
}

// SetUserSetting of the user to the related item.
// Sets o.R.UserSetting to related.
// Adds o to related.R.User.
func (o *User) SetUserSetting(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserSetting) error {
	var err error

	if insert {
		queries.Assign(&related.UserID, o.ID)

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE `user_settings` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
			strmangle.WhereClause("`", "`", 0, userSettingPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.UserID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		queries.Assign(&related.UserID, o.ID)
	}

	if o.R == nil {
		o.R = &userR{
			UserSetting: related,
		}
	} else {
		o.R.UserSetting = related
	}

	if related.R == nil {
		related.R = &userSettingR{
			User: o,
		}
	} else {
		related.R.User = o
	}
	return nil
}

// AddCharacterCharacterContactsG adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CharacterCharacterContacts.
// Sets related.R.Character appropriately.
// Uses the global database handle.
func (o *User) AddCharacterCharacterContactsG(ctx context.Context, insert bool, related ...*CharacterContact) error {
	return o.AddCharacterCharacterContacts(ctx, boil.GetContextDB(), insert, related...)
}

// AddCharacterCharacterContacts adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CharacterCharacterContacts.
// Sets related.R.Character appropriately.
func (o *User) AddCharacterCharacterContacts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CharacterContact) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CharacterID = o.CharacterID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `character_contacts` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"character_id"}),
				strmangle.WhereClause("`", "`", 0, characterContactPrimaryKeyColumns),
			)
			values := []interface{}{o.CharacterID, rel.CharacterID, rel.ContactID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CharacterID = o.CharacterID
		}
	}

	if o.R == nil {
		o.R = &userR{
			CharacterCharacterContacts: related,
		}
	} else {
		o.R.CharacterCharacterContacts = append(o.R.CharacterCharacterContacts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &characterContactR{
				Character: o,
			}
		} else {
			rel.R.Character = o
		}
	}
	return nil
}

// AddCharacterCharacterFlyableShipsG adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CharacterCharacterFlyableShips.
// Sets related.R.Character appropriately.
// Uses the global database handle.
func (o *User) AddCharacterCharacterFlyableShipsG(ctx context.Context, insert bool, related ...*CharacterFlyableShip) error {
	return o.AddCharacterCharacterFlyableShips(ctx, boil.GetContextDB(), insert, related...)
}

// AddCharacterCharacterFlyableShips adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CharacterCharacterFlyableShips.
// Sets related.R.Character appropriately.
func (o *User) AddCharacterCharacterFlyableShips(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CharacterFlyableShip) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CharacterID = o.CharacterID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `character_flyable_ships` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"character_id"}),
				strmangle.WhereClause("`", "`", 0, characterFlyableShipPrimaryKeyColumns),
			)
			values := []interface{}{o.CharacterID, rel.CharacterID, rel.ShipTypeID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CharacterID = o.CharacterID
		}
	}

	if o.R == nil {
		o.R = &userR{
			CharacterCharacterFlyableShips: related,
		}
	} else {
		o.R.CharacterCharacterFlyableShips = append(o.R.CharacterCharacterFlyableShips, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &characterFlyableShipR{
				Character: o,
			}
		} else {
			rel.R.Character = o
		}
	}
	return nil
}

// AddCharacterCharacterImplantsG adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CharacterCharacterImplants.
// Sets related.R.Character appropriately.
// Uses the global database handle.
func (o *User) AddCharacterCharacterImplantsG(ctx context.Context, insert bool, related ...*CharacterImplant) error {
	return o.AddCharacterCharacterImplants(ctx, boil.GetContextDB(), insert, related...)
}

// AddCharacterCharacterImplants adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CharacterCharacterImplants.
// Sets related.R.Character appropriately.
func (o *User) AddCharacterCharacterImplants(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CharacterImplant) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CharacterID = o.CharacterID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `character_implants` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"character_id"}),
				strmangle.WhereClause("`", "`", 0, characterImplantPrimaryKeyColumns),
			)
			values := []interface{}{o.CharacterID, rel.CharacterID, rel.ImplantID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CharacterID = o.CharacterID
		}
	}

	if o.R == nil {
		o.R = &userR{
			CharacterCharacterImplants: related,
		}
	} else {
		o.R.CharacterCharacterImplants = append(o.R.CharacterCharacterImplants, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &characterImplantR{
				Character: o,
			}
		} else {
			rel.R.Character = o
		}
	}
	return nil
}

// AddCharacterCharacterJumpClonesG adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CharacterCharacterJumpClones.
// Sets related.R.Character appropriately.
// Uses the global database handle.
func (o *User) AddCharacterCharacterJumpClonesG(ctx context.Context, insert bool, related ...*CharacterJumpClone) error {
	return o.AddCharacterCharacterJumpClones(ctx, boil.GetContextDB(), insert, related...)
}

// AddCharacterCharacterJumpClones adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CharacterCharacterJumpClones.
// Sets related.R.Character appropriately.
func (o *User) AddCharacterCharacterJumpClones(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CharacterJumpClone) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CharacterID = o.CharacterID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `character_jump_clones` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"character_id"}),
				strmangle.WhereClause("`", "`", 0, characterJumpClonePrimaryKeyColumns),
			)
			values := []interface{}{o.CharacterID, rel.CharacterID, rel.JumpCloneID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CharacterID = o.CharacterID
		}
	}

	if o.R == nil {
		o.R = &userR{
			CharacterCharacterJumpClones: related,
		}
	} else {
		o.R.CharacterCharacterJumpClones = append(o.R.CharacterCharacterJumpClones, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &characterJumpCloneR{
				Character: o,
			}
		} else {
			rel.R.Character = o
		}
	}
	return nil
}

// AddCharacterCharacterSkillqueuesG adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CharacterCharacterSkillqueues.
// Sets related.R.Character appropriately.
// Uses the global database handle.
func (o *User) AddCharacterCharacterSkillqueuesG(ctx context.Context, insert bool, related ...*CharacterSkillqueue) error {
	return o.AddCharacterCharacterSkillqueues(ctx, boil.GetContextDB(), insert, related...)
}

// AddCharacterCharacterSkillqueues adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CharacterCharacterSkillqueues.
// Sets related.R.Character appropriately.
func (o *User) AddCharacterCharacterSkillqueues(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CharacterSkillqueue) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CharacterID = o.CharacterID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `character_skillqueue` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"character_id"}),
				strmangle.WhereClause("`", "`", 0, characterSkillqueuePrimaryKeyColumns),
			)
			values := []interface{}{o.CharacterID, rel.CharacterID, rel.QueuePosition}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CharacterID = o.CharacterID
		}
	}

	if o.R == nil {
		o.R = &userR{
			CharacterCharacterSkillqueues: related,
		}
	} else {
		o.R.CharacterCharacterSkillqueues = append(o.R.CharacterCharacterSkillqueues, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &characterSkillqueueR{
				Character: o,
			}
		} else {
			rel.R.Character = o
		}
	}
	return nil
}

// AddCharacterCharacterSkillsG adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CharacterCharacterSkills.
// Sets related.R.Character appropriately.
// Uses the global database handle.
func (o *User) AddCharacterCharacterSkillsG(ctx context.Context, insert bool, related ...*CharacterSkill) error {
	return o.AddCharacterCharacterSkills(ctx, boil.GetContextDB(), insert, related...)
}

// AddCharacterCharacterSkills adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CharacterCharacterSkills.
// Sets related.R.Character appropriately.
func (o *User) AddCharacterCharacterSkills(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CharacterSkill) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CharacterID = o.CharacterID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `character_skills` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"character_id"}),
				strmangle.WhereClause("`", "`", 0, characterSkillPrimaryKeyColumns),
			)
			values := []interface{}{o.CharacterID, rel.CharacterID, rel.SkillID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CharacterID = o.CharacterID
		}
	}

	if o.R == nil {
		o.R = &userR{
			CharacterCharacterSkills: related,
		}
	} else {
		o.R.CharacterCharacterSkills = append(o.R.CharacterCharacterSkills, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &characterSkillR{
				Character: o,
			}
		} else {
			rel.R.Character = o
		}
	}
	return nil
}

// Users retrieves all the records using an executor.
func Users(mods ...qm.QueryMod) userQuery {
	mods = append(mods, qm.From("`users`"))
	return userQuery{NewQuery(mods...)}
}

// FindUserG retrieves a single record by ID.
func FindUserG(ctx context.Context, iD uuid.UUID, selectCols ...string) (*User, error) {
	return FindUser(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUser(ctx context.Context, exec boil.ContextExecutor, iD uuid.UUID, selectCols ...string) (*User, error) {
	userObj := &User{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `users` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from users")
	}

	if err = userObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userObj, err
	}

	return userObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *User) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *User) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no users provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userInsertCacheMut.RLock()
	cache, cached := userInsertCache[key]
	userInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userAllColumns,
			userColumnsWithDefault,
			userColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userType, userMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userType, userMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `users` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `users` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `users` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into users")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for users")
	}

CacheNoHooks:
	if !cached {
		userInsertCacheMut.Lock()
		userInsertCache[key] = cache
		userInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single User record using the global executor.
// See Update for more documentation.
func (o *User) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the User.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *User) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userUpdateCacheMut.RLock()
	cache, cached := userUpdateCache[key]
	userUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userAllColumns,
			userPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update users, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `users` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userType, userMapping, append(wl, userPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update users row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for users")
	}

	if !cached {
		userUpdateCacheMut.Lock()
		userUpdateCache[key] = cache
		userUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q userQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q userQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for users")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UserSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `users` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in user slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all user")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *User) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLUserUniqueColumns = []string{
	"id",
	"character_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *User) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no users provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUserUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userUpsertCacheMut.RLock()
	cache, cached := userUpsertCache[key]
	userUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userAllColumns,
			userColumnsWithDefault,
			userColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userAllColumns,
			userPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("boiler: unable to upsert users, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`users`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `users` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(userType, userMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userType, userMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert for users")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(userType, userMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to retrieve unique values for users")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for users")
	}

CacheNoHooks:
	if !cached {
		userUpsertCacheMut.Lock()
		userUpsertCache[key] = cache
		userUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single User record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *User) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single User record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *User) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no User provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userPrimaryKeyMapping)
	sql := "DELETE FROM `users` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for users")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q userQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q userQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no userQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for users")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o UserSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `users` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from user slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for users")
	}

	if len(userAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *User) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("boiler: no User provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *User) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUser(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("boiler: empty UserSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `users`.* FROM `users` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in UserSlice")
	}

	*o = slice

	return nil
}

// UserExistsG checks if the User row exists.
func UserExistsG(ctx context.Context, iD uuid.UUID) (bool, error) {
	return UserExists(ctx, boil.GetContextDB(), iD)
}

// UserExists checks if the User row exists.
func UserExists(ctx context.Context, exec boil.ContextExecutor, iD uuid.UUID) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `users` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if users exists")
	}

	return exists, nil
}
