// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MapStation is an object representing the database table.
type MapStation struct {
	ID                       uint      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name                     string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	SystemID                 uint      `boil:"system_id" json:"system_id" toml:"system_id" yaml:"system_id"`
	TypeID                   uint      `boil:"type_id" json:"type_id" toml:"type_id" yaml:"type_id"`
	RaceID                   null.Uint `boil:"race_id" json:"race_id,omitempty" toml:"race_id" yaml:"race_id,omitempty"`
	OwnerCorporationID       null.Uint `boil:"owner_corporation_id" json:"owner_corporation_id,omitempty" toml:"owner_corporation_id" yaml:"owner_corporation_id,omitempty"`
	MaxDockableShipVolume    float32   `boil:"max_dockable_ship_volume" json:"max_dockable_ship_volume" toml:"max_dockable_ship_volume" yaml:"max_dockable_ship_volume"`
	OfficeRentalCost         float32   `boil:"office_rental_cost" json:"office_rental_cost" toml:"office_rental_cost" yaml:"office_rental_cost"`
	ReprocessingEfficiency   float32   `boil:"reprocessing_efficiency" json:"reprocessing_efficiency" toml:"reprocessing_efficiency" yaml:"reprocessing_efficiency"`
	ReprocessingStationsTake float32   `boil:"reprocessing_stations_take" json:"reprocessing_stations_take" toml:"reprocessing_stations_take" yaml:"reprocessing_stations_take"`
	CreatedAt                time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt                time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *mapStationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L mapStationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MapStationColumns = struct {
	ID                       string
	Name                     string
	SystemID                 string
	TypeID                   string
	RaceID                   string
	OwnerCorporationID       string
	MaxDockableShipVolume    string
	OfficeRentalCost         string
	ReprocessingEfficiency   string
	ReprocessingStationsTake string
	CreatedAt                string
	UpdatedAt                string
}{
	ID:                       "id",
	Name:                     "name",
	SystemID:                 "system_id",
	TypeID:                   "type_id",
	RaceID:                   "race_id",
	OwnerCorporationID:       "owner_corporation_id",
	MaxDockableShipVolume:    "max_dockable_ship_volume",
	OfficeRentalCost:         "office_rental_cost",
	ReprocessingEfficiency:   "reprocessing_efficiency",
	ReprocessingStationsTake: "reprocessing_stations_take",
	CreatedAt:                "created_at",
	UpdatedAt:                "updated_at",
}

var MapStationTableColumns = struct {
	ID                       string
	Name                     string
	SystemID                 string
	TypeID                   string
	RaceID                   string
	OwnerCorporationID       string
	MaxDockableShipVolume    string
	OfficeRentalCost         string
	ReprocessingEfficiency   string
	ReprocessingStationsTake string
	CreatedAt                string
	UpdatedAt                string
}{
	ID:                       "map_stations.id",
	Name:                     "map_stations.name",
	SystemID:                 "map_stations.system_id",
	TypeID:                   "map_stations.type_id",
	RaceID:                   "map_stations.race_id",
	OwnerCorporationID:       "map_stations.owner_corporation_id",
	MaxDockableShipVolume:    "map_stations.max_dockable_ship_volume",
	OfficeRentalCost:         "map_stations.office_rental_cost",
	ReprocessingEfficiency:   "map_stations.reprocessing_efficiency",
	ReprocessingStationsTake: "map_stations.reprocessing_stations_take",
	CreatedAt:                "map_stations.created_at",
	UpdatedAt:                "map_stations.updated_at",
}

// Generated where

var MapStationWhere = struct {
	ID                       whereHelperuint
	Name                     whereHelperstring
	SystemID                 whereHelperuint
	TypeID                   whereHelperuint
	RaceID                   whereHelpernull_Uint
	OwnerCorporationID       whereHelpernull_Uint
	MaxDockableShipVolume    whereHelperfloat32
	OfficeRentalCost         whereHelperfloat32
	ReprocessingEfficiency   whereHelperfloat32
	ReprocessingStationsTake whereHelperfloat32
	CreatedAt                whereHelpertime_Time
	UpdatedAt                whereHelpertime_Time
}{
	ID:                       whereHelperuint{field: "`map_stations`.`id`"},
	Name:                     whereHelperstring{field: "`map_stations`.`name`"},
	SystemID:                 whereHelperuint{field: "`map_stations`.`system_id`"},
	TypeID:                   whereHelperuint{field: "`map_stations`.`type_id`"},
	RaceID:                   whereHelpernull_Uint{field: "`map_stations`.`race_id`"},
	OwnerCorporationID:       whereHelpernull_Uint{field: "`map_stations`.`owner_corporation_id`"},
	MaxDockableShipVolume:    whereHelperfloat32{field: "`map_stations`.`max_dockable_ship_volume`"},
	OfficeRentalCost:         whereHelperfloat32{field: "`map_stations`.`office_rental_cost`"},
	ReprocessingEfficiency:   whereHelperfloat32{field: "`map_stations`.`reprocessing_efficiency`"},
	ReprocessingStationsTake: whereHelperfloat32{field: "`map_stations`.`reprocessing_stations_take`"},
	CreatedAt:                whereHelpertime_Time{field: "`map_stations`.`created_at`"},
	UpdatedAt:                whereHelpertime_Time{field: "`map_stations`.`updated_at`"},
}

// MapStationRels is where relationship names are stored.
var MapStationRels = struct {
}{}

// mapStationR is where relationships are stored.
type mapStationR struct {
}

// NewStruct creates a new relationship struct
func (*mapStationR) NewStruct() *mapStationR {
	return &mapStationR{}
}

// mapStationL is where Load methods for each relationship are stored.
type mapStationL struct{}

var (
	mapStationAllColumns            = []string{"id", "name", "system_id", "type_id", "race_id", "owner_corporation_id", "max_dockable_ship_volume", "office_rental_cost", "reprocessing_efficiency", "reprocessing_stations_take", "created_at", "updated_at"}
	mapStationColumnsWithoutDefault = []string{"id", "name", "system_id", "type_id", "race_id", "owner_corporation_id", "max_dockable_ship_volume", "office_rental_cost", "reprocessing_efficiency", "reprocessing_stations_take", "created_at", "updated_at"}
	mapStationColumnsWithDefault    = []string{}
	mapStationPrimaryKeyColumns     = []string{"id"}
)

type (
	// MapStationSlice is an alias for a slice of pointers to MapStation.
	// This should almost always be used instead of []MapStation.
	MapStationSlice []*MapStation
	// MapStationHook is the signature for custom MapStation hook methods
	MapStationHook func(context.Context, boil.ContextExecutor, *MapStation) error

	mapStationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mapStationType                 = reflect.TypeOf(&MapStation{})
	mapStationMapping              = queries.MakeStructMapping(mapStationType)
	mapStationPrimaryKeyMapping, _ = queries.BindMapping(mapStationType, mapStationMapping, mapStationPrimaryKeyColumns)
	mapStationInsertCacheMut       sync.RWMutex
	mapStationInsertCache          = make(map[string]insertCache)
	mapStationUpdateCacheMut       sync.RWMutex
	mapStationUpdateCache          = make(map[string]updateCache)
	mapStationUpsertCacheMut       sync.RWMutex
	mapStationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mapStationBeforeInsertHooks []MapStationHook
var mapStationBeforeUpdateHooks []MapStationHook
var mapStationBeforeDeleteHooks []MapStationHook
var mapStationBeforeUpsertHooks []MapStationHook

var mapStationAfterInsertHooks []MapStationHook
var mapStationAfterSelectHooks []MapStationHook
var mapStationAfterUpdateHooks []MapStationHook
var mapStationAfterDeleteHooks []MapStationHook
var mapStationAfterUpsertHooks []MapStationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MapStation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mapStationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MapStation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mapStationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MapStation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mapStationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MapStation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mapStationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MapStation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mapStationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MapStation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mapStationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MapStation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mapStationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MapStation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mapStationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MapStation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mapStationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMapStationHook registers your hook function for all future operations.
func AddMapStationHook(hookPoint boil.HookPoint, mapStationHook MapStationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		mapStationBeforeInsertHooks = append(mapStationBeforeInsertHooks, mapStationHook)
	case boil.BeforeUpdateHook:
		mapStationBeforeUpdateHooks = append(mapStationBeforeUpdateHooks, mapStationHook)
	case boil.BeforeDeleteHook:
		mapStationBeforeDeleteHooks = append(mapStationBeforeDeleteHooks, mapStationHook)
	case boil.BeforeUpsertHook:
		mapStationBeforeUpsertHooks = append(mapStationBeforeUpsertHooks, mapStationHook)
	case boil.AfterInsertHook:
		mapStationAfterInsertHooks = append(mapStationAfterInsertHooks, mapStationHook)
	case boil.AfterSelectHook:
		mapStationAfterSelectHooks = append(mapStationAfterSelectHooks, mapStationHook)
	case boil.AfterUpdateHook:
		mapStationAfterUpdateHooks = append(mapStationAfterUpdateHooks, mapStationHook)
	case boil.AfterDeleteHook:
		mapStationAfterDeleteHooks = append(mapStationAfterDeleteHooks, mapStationHook)
	case boil.AfterUpsertHook:
		mapStationAfterUpsertHooks = append(mapStationAfterUpsertHooks, mapStationHook)
	}
}

// OneG returns a single mapStation record from the query using the global executor.
func (q mapStationQuery) OneG(ctx context.Context) (*MapStation, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single mapStation record from the query.
func (q mapStationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MapStation, error) {
	o := &MapStation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for map_stations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all MapStation records from the query using the global executor.
func (q mapStationQuery) AllG(ctx context.Context) (MapStationSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all MapStation records from the query.
func (q mapStationQuery) All(ctx context.Context, exec boil.ContextExecutor) (MapStationSlice, error) {
	var o []*MapStation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to MapStation slice")
	}

	if len(mapStationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all MapStation records in the query, and panics on error.
func (q mapStationQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all MapStation records in the query.
func (q mapStationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count map_stations rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q mapStationQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q mapStationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if map_stations exists")
	}

	return count > 0, nil
}

// MapStations retrieves all the records using an executor.
func MapStations(mods ...qm.QueryMod) mapStationQuery {
	mods = append(mods, qm.From("`map_stations`"))
	return mapStationQuery{NewQuery(mods...)}
}

// FindMapStationG retrieves a single record by ID.
func FindMapStationG(ctx context.Context, iD uint, selectCols ...string) (*MapStation, error) {
	return FindMapStation(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindMapStation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMapStation(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*MapStation, error) {
	mapStationObj := &MapStation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `map_stations` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, mapStationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from map_stations")
	}

	if err = mapStationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return mapStationObj, err
	}

	return mapStationObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *MapStation) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MapStation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no map_stations provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mapStationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mapStationInsertCacheMut.RLock()
	cache, cached := mapStationInsertCache[key]
	mapStationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mapStationAllColumns,
			mapStationColumnsWithDefault,
			mapStationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mapStationType, mapStationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mapStationType, mapStationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `map_stations` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `map_stations` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `map_stations` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, mapStationPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into map_stations")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for map_stations")
	}

CacheNoHooks:
	if !cached {
		mapStationInsertCacheMut.Lock()
		mapStationInsertCache[key] = cache
		mapStationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single MapStation record using the global executor.
// See Update for more documentation.
func (o *MapStation) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the MapStation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MapStation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mapStationUpdateCacheMut.RLock()
	cache, cached := mapStationUpdateCache[key]
	mapStationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mapStationAllColumns,
			mapStationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update map_stations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `map_stations` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, mapStationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mapStationType, mapStationMapping, append(wl, mapStationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update map_stations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for map_stations")
	}

	if !cached {
		mapStationUpdateCacheMut.Lock()
		mapStationUpdateCache[key] = cache
		mapStationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q mapStationQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q mapStationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for map_stations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for map_stations")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MapStationSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MapStationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mapStationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `map_stations` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mapStationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in mapStation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all mapStation")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *MapStation) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLMapStationUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MapStation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no map_stations provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mapStationColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLMapStationUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mapStationUpsertCacheMut.RLock()
	cache, cached := mapStationUpsertCache[key]
	mapStationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mapStationAllColumns,
			mapStationColumnsWithDefault,
			mapStationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			mapStationAllColumns,
			mapStationPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("boiler: unable to upsert map_stations, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`map_stations`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `map_stations` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(mapStationType, mapStationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mapStationType, mapStationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert for map_stations")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(mapStationType, mapStationMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to retrieve unique values for map_stations")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for map_stations")
	}

CacheNoHooks:
	if !cached {
		mapStationUpsertCacheMut.Lock()
		mapStationUpsertCache[key] = cache
		mapStationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single MapStation record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *MapStation) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single MapStation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MapStation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no MapStation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mapStationPrimaryKeyMapping)
	sql := "DELETE FROM `map_stations` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from map_stations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for map_stations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q mapStationQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q mapStationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no mapStationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from map_stations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for map_stations")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o MapStationSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MapStationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mapStationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mapStationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `map_stations` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mapStationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mapStation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for map_stations")
	}

	if len(mapStationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *MapStation) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("boiler: no MapStation provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MapStation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMapStation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MapStationSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("boiler: empty MapStationSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MapStationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MapStationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mapStationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `map_stations`.* FROM `map_stations` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mapStationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in MapStationSlice")
	}

	*o = slice

	return nil
}

// MapStationExistsG checks if the MapStation row exists.
func MapStationExistsG(ctx context.Context, iD uint) (bool, error) {
	return MapStationExists(ctx, boil.GetContextDB(), iD)
}

// MapStationExists checks if the MapStation row exists.
func MapStationExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `map_stations` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if map_stations exists")
	}

	return exists, nil
}
