// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CharacterAttribute is an object representing the database table.
type CharacterAttribute struct {
	CharacterID              uint64    `boil:"character_id" json:"character_id" toml:"character_id" yaml:"character_id"`
	Charisma                 uint8     `boil:"charisma" json:"charisma" toml:"charisma" yaml:"charisma"`
	Intelligence             uint8     `boil:"intelligence" json:"intelligence" toml:"intelligence" yaml:"intelligence"`
	Memory                   uint8     `boil:"memory" json:"memory" toml:"memory" yaml:"memory"`
	Perception               uint8     `boil:"perception" json:"perception" toml:"perception" yaml:"perception"`
	Willpower                uint8     `boil:"willpower" json:"willpower" toml:"willpower" yaml:"willpower"`
	BonusRemaps              uint8     `boil:"bonus_remaps" json:"bonus_remaps" toml:"bonus_remaps" yaml:"bonus_remaps"`
	LastRemapDate            null.Time `boil:"last_remap_date" json:"last_remap_date,omitempty" toml:"last_remap_date" yaml:"last_remap_date,omitempty"`
	AccruedRemapCooldownDate null.Time `boil:"accrued_remap_cooldown_date" json:"accrued_remap_cooldown_date,omitempty" toml:"accrued_remap_cooldown_date" yaml:"accrued_remap_cooldown_date,omitempty"`
	CreatedAt                time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt                time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *characterAttributeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L characterAttributeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CharacterAttributeColumns = struct {
	CharacterID              string
	Charisma                 string
	Intelligence             string
	Memory                   string
	Perception               string
	Willpower                string
	BonusRemaps              string
	LastRemapDate            string
	AccruedRemapCooldownDate string
	CreatedAt                string
	UpdatedAt                string
}{
	CharacterID:              "character_id",
	Charisma:                 "charisma",
	Intelligence:             "intelligence",
	Memory:                   "memory",
	Perception:               "perception",
	Willpower:                "willpower",
	BonusRemaps:              "bonus_remaps",
	LastRemapDate:            "last_remap_date",
	AccruedRemapCooldownDate: "accrued_remap_cooldown_date",
	CreatedAt:                "created_at",
	UpdatedAt:                "updated_at",
}

var CharacterAttributeTableColumns = struct {
	CharacterID              string
	Charisma                 string
	Intelligence             string
	Memory                   string
	Perception               string
	Willpower                string
	BonusRemaps              string
	LastRemapDate            string
	AccruedRemapCooldownDate string
	CreatedAt                string
	UpdatedAt                string
}{
	CharacterID:              "character_attributes.character_id",
	Charisma:                 "character_attributes.charisma",
	Intelligence:             "character_attributes.intelligence",
	Memory:                   "character_attributes.memory",
	Perception:               "character_attributes.perception",
	Willpower:                "character_attributes.willpower",
	BonusRemaps:              "character_attributes.bonus_remaps",
	LastRemapDate:            "character_attributes.last_remap_date",
	AccruedRemapCooldownDate: "character_attributes.accrued_remap_cooldown_date",
	CreatedAt:                "character_attributes.created_at",
	UpdatedAt:                "character_attributes.updated_at",
}

// Generated where

type whereHelperuint64 struct{ field string }

func (w whereHelperuint64) EQ(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint64) NEQ(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint64) LT(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint64) LTE(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint64) GT(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint64) GTE(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperuint64) IN(slice []uint64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperuint64) NIN(slice []uint64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperuint8 struct{ field string }

func (w whereHelperuint8) EQ(x uint8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint8) NEQ(x uint8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint8) LT(x uint8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint8) LTE(x uint8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint8) GT(x uint8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint8) GTE(x uint8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperuint8) IN(slice []uint8) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperuint8) NIN(slice []uint8) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var CharacterAttributeWhere = struct {
	CharacterID              whereHelperuint64
	Charisma                 whereHelperuint8
	Intelligence             whereHelperuint8
	Memory                   whereHelperuint8
	Perception               whereHelperuint8
	Willpower                whereHelperuint8
	BonusRemaps              whereHelperuint8
	LastRemapDate            whereHelpernull_Time
	AccruedRemapCooldownDate whereHelpernull_Time
	CreatedAt                whereHelpertime_Time
	UpdatedAt                whereHelpertime_Time
}{
	CharacterID:              whereHelperuint64{field: "`character_attributes`.`character_id`"},
	Charisma:                 whereHelperuint8{field: "`character_attributes`.`charisma`"},
	Intelligence:             whereHelperuint8{field: "`character_attributes`.`intelligence`"},
	Memory:                   whereHelperuint8{field: "`character_attributes`.`memory`"},
	Perception:               whereHelperuint8{field: "`character_attributes`.`perception`"},
	Willpower:                whereHelperuint8{field: "`character_attributes`.`willpower`"},
	BonusRemaps:              whereHelperuint8{field: "`character_attributes`.`bonus_remaps`"},
	LastRemapDate:            whereHelpernull_Time{field: "`character_attributes`.`last_remap_date`"},
	AccruedRemapCooldownDate: whereHelpernull_Time{field: "`character_attributes`.`accrued_remap_cooldown_date`"},
	CreatedAt:                whereHelpertime_Time{field: "`character_attributes`.`created_at`"},
	UpdatedAt:                whereHelpertime_Time{field: "`character_attributes`.`updated_at`"},
}

// CharacterAttributeRels is where relationship names are stored.
var CharacterAttributeRels = struct {
	Character string
}{
	Character: "Character",
}

// characterAttributeR is where relationships are stored.
type characterAttributeR struct {
	Character *User `boil:"Character" json:"Character" toml:"Character" yaml:"Character"`
}

// NewStruct creates a new relationship struct
func (*characterAttributeR) NewStruct() *characterAttributeR {
	return &characterAttributeR{}
}

// characterAttributeL is where Load methods for each relationship are stored.
type characterAttributeL struct{}

var (
	characterAttributeAllColumns            = []string{"character_id", "charisma", "intelligence", "memory", "perception", "willpower", "bonus_remaps", "last_remap_date", "accrued_remap_cooldown_date", "created_at", "updated_at"}
	characterAttributeColumnsWithoutDefault = []string{"character_id", "charisma", "intelligence", "memory", "perception", "willpower", "last_remap_date", "accrued_remap_cooldown_date", "created_at", "updated_at"}
	characterAttributeColumnsWithDefault    = []string{"bonus_remaps"}
	characterAttributePrimaryKeyColumns     = []string{"character_id"}
)

type (
	// CharacterAttributeSlice is an alias for a slice of pointers to CharacterAttribute.
	// This should almost always be used instead of []CharacterAttribute.
	CharacterAttributeSlice []*CharacterAttribute
	// CharacterAttributeHook is the signature for custom CharacterAttribute hook methods
	CharacterAttributeHook func(context.Context, boil.ContextExecutor, *CharacterAttribute) error

	characterAttributeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	characterAttributeType                 = reflect.TypeOf(&CharacterAttribute{})
	characterAttributeMapping              = queries.MakeStructMapping(characterAttributeType)
	characterAttributePrimaryKeyMapping, _ = queries.BindMapping(characterAttributeType, characterAttributeMapping, characterAttributePrimaryKeyColumns)
	characterAttributeInsertCacheMut       sync.RWMutex
	characterAttributeInsertCache          = make(map[string]insertCache)
	characterAttributeUpdateCacheMut       sync.RWMutex
	characterAttributeUpdateCache          = make(map[string]updateCache)
	characterAttributeUpsertCacheMut       sync.RWMutex
	characterAttributeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var characterAttributeBeforeInsertHooks []CharacterAttributeHook
var characterAttributeBeforeUpdateHooks []CharacterAttributeHook
var characterAttributeBeforeDeleteHooks []CharacterAttributeHook
var characterAttributeBeforeUpsertHooks []CharacterAttributeHook

var characterAttributeAfterInsertHooks []CharacterAttributeHook
var characterAttributeAfterSelectHooks []CharacterAttributeHook
var characterAttributeAfterUpdateHooks []CharacterAttributeHook
var characterAttributeAfterDeleteHooks []CharacterAttributeHook
var characterAttributeAfterUpsertHooks []CharacterAttributeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CharacterAttribute) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterAttributeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CharacterAttribute) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterAttributeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CharacterAttribute) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterAttributeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CharacterAttribute) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterAttributeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CharacterAttribute) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterAttributeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CharacterAttribute) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterAttributeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CharacterAttribute) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterAttributeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CharacterAttribute) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterAttributeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CharacterAttribute) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterAttributeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCharacterAttributeHook registers your hook function for all future operations.
func AddCharacterAttributeHook(hookPoint boil.HookPoint, characterAttributeHook CharacterAttributeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		characterAttributeBeforeInsertHooks = append(characterAttributeBeforeInsertHooks, characterAttributeHook)
	case boil.BeforeUpdateHook:
		characterAttributeBeforeUpdateHooks = append(characterAttributeBeforeUpdateHooks, characterAttributeHook)
	case boil.BeforeDeleteHook:
		characterAttributeBeforeDeleteHooks = append(characterAttributeBeforeDeleteHooks, characterAttributeHook)
	case boil.BeforeUpsertHook:
		characterAttributeBeforeUpsertHooks = append(characterAttributeBeforeUpsertHooks, characterAttributeHook)
	case boil.AfterInsertHook:
		characterAttributeAfterInsertHooks = append(characterAttributeAfterInsertHooks, characterAttributeHook)
	case boil.AfterSelectHook:
		characterAttributeAfterSelectHooks = append(characterAttributeAfterSelectHooks, characterAttributeHook)
	case boil.AfterUpdateHook:
		characterAttributeAfterUpdateHooks = append(characterAttributeAfterUpdateHooks, characterAttributeHook)
	case boil.AfterDeleteHook:
		characterAttributeAfterDeleteHooks = append(characterAttributeAfterDeleteHooks, characterAttributeHook)
	case boil.AfterUpsertHook:
		characterAttributeAfterUpsertHooks = append(characterAttributeAfterUpsertHooks, characterAttributeHook)
	}
}

// OneG returns a single characterAttribute record from the query using the global executor.
func (q characterAttributeQuery) OneG(ctx context.Context) (*CharacterAttribute, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single characterAttribute record from the query.
func (q characterAttributeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CharacterAttribute, error) {
	o := &CharacterAttribute{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for character_attributes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all CharacterAttribute records from the query using the global executor.
func (q characterAttributeQuery) AllG(ctx context.Context) (CharacterAttributeSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all CharacterAttribute records from the query.
func (q characterAttributeQuery) All(ctx context.Context, exec boil.ContextExecutor) (CharacterAttributeSlice, error) {
	var o []*CharacterAttribute

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to CharacterAttribute slice")
	}

	if len(characterAttributeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all CharacterAttribute records in the query, and panics on error.
func (q characterAttributeQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all CharacterAttribute records in the query.
func (q characterAttributeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count character_attributes rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q characterAttributeQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q characterAttributeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if character_attributes exists")
	}

	return count > 0, nil
}

// Character pointed to by the foreign key.
func (o *CharacterAttribute) Character(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`character_id` = ?", o.CharacterID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`users`")

	return query
}

// LoadCharacter allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (characterAttributeL) LoadCharacter(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCharacterAttribute interface{}, mods queries.Applicator) error {
	var slice []*CharacterAttribute
	var object *CharacterAttribute

	if singular {
		object = maybeCharacterAttribute.(*CharacterAttribute)
	} else {
		slice = *maybeCharacterAttribute.(*[]*CharacterAttribute)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &characterAttributeR{}
		}
		args = append(args, object.CharacterID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &characterAttributeR{}
			}

			for _, a := range args {
				if a == obj.CharacterID {
					continue Outer
				}
			}

			args = append(args, obj.CharacterID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.character_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(characterAttributeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Character = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CharacterCharacterAttribute = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CharacterID == foreign.CharacterID {
				local.R.Character = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CharacterCharacterAttribute = local
				break
			}
		}
	}

	return nil
}

// SetCharacterG of the characterAttribute to the related item.
// Sets o.R.Character to related.
// Adds o to related.R.CharacterCharacterAttribute.
// Uses the global database handle.
func (o *CharacterAttribute) SetCharacterG(ctx context.Context, insert bool, related *User) error {
	return o.SetCharacter(ctx, boil.GetContextDB(), insert, related)
}

// SetCharacter of the characterAttribute to the related item.
// Sets o.R.Character to related.
// Adds o to related.R.CharacterCharacterAttribute.
func (o *CharacterAttribute) SetCharacter(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `character_attributes` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"character_id"}),
		strmangle.WhereClause("`", "`", 0, characterAttributePrimaryKeyColumns),
	)
	values := []interface{}{related.CharacterID, o.CharacterID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CharacterID = related.CharacterID
	if o.R == nil {
		o.R = &characterAttributeR{
			Character: related,
		}
	} else {
		o.R.Character = related
	}

	if related.R == nil {
		related.R = &userR{
			CharacterCharacterAttribute: o,
		}
	} else {
		related.R.CharacterCharacterAttribute = o
	}

	return nil
}

// CharacterAttributes retrieves all the records using an executor.
func CharacterAttributes(mods ...qm.QueryMod) characterAttributeQuery {
	mods = append(mods, qm.From("`character_attributes`"))
	return characterAttributeQuery{NewQuery(mods...)}
}

// FindCharacterAttributeG retrieves a single record by ID.
func FindCharacterAttributeG(ctx context.Context, characterID uint64, selectCols ...string) (*CharacterAttribute, error) {
	return FindCharacterAttribute(ctx, boil.GetContextDB(), characterID, selectCols...)
}

// FindCharacterAttribute retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCharacterAttribute(ctx context.Context, exec boil.ContextExecutor, characterID uint64, selectCols ...string) (*CharacterAttribute, error) {
	characterAttributeObj := &CharacterAttribute{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `character_attributes` where `character_id`=?", sel,
	)

	q := queries.Raw(query, characterID)

	err := q.Bind(ctx, exec, characterAttributeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from character_attributes")
	}

	if err = characterAttributeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return characterAttributeObj, err
	}

	return characterAttributeObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *CharacterAttribute) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CharacterAttribute) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no character_attributes provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(characterAttributeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	characterAttributeInsertCacheMut.RLock()
	cache, cached := characterAttributeInsertCache[key]
	characterAttributeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			characterAttributeAllColumns,
			characterAttributeColumnsWithDefault,
			characterAttributeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(characterAttributeType, characterAttributeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(characterAttributeType, characterAttributeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `character_attributes` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `character_attributes` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `character_attributes` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, characterAttributePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into character_attributes")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.CharacterID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for character_attributes")
	}

CacheNoHooks:
	if !cached {
		characterAttributeInsertCacheMut.Lock()
		characterAttributeInsertCache[key] = cache
		characterAttributeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single CharacterAttribute record using the global executor.
// See Update for more documentation.
func (o *CharacterAttribute) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the CharacterAttribute.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CharacterAttribute) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	characterAttributeUpdateCacheMut.RLock()
	cache, cached := characterAttributeUpdateCache[key]
	characterAttributeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			characterAttributeAllColumns,
			characterAttributePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update character_attributes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `character_attributes` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, characterAttributePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(characterAttributeType, characterAttributeMapping, append(wl, characterAttributePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update character_attributes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for character_attributes")
	}

	if !cached {
		characterAttributeUpdateCacheMut.Lock()
		characterAttributeUpdateCache[key] = cache
		characterAttributeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q characterAttributeQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q characterAttributeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for character_attributes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for character_attributes")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CharacterAttributeSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CharacterAttributeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), characterAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `character_attributes` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, characterAttributePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in characterAttribute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all characterAttribute")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *CharacterAttribute) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLCharacterAttributeUniqueColumns = []string{
	"character_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CharacterAttribute) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no character_attributes provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(characterAttributeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCharacterAttributeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	characterAttributeUpsertCacheMut.RLock()
	cache, cached := characterAttributeUpsertCache[key]
	characterAttributeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			characterAttributeAllColumns,
			characterAttributeColumnsWithDefault,
			characterAttributeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			characterAttributeAllColumns,
			characterAttributePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("boiler: unable to upsert character_attributes, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`character_attributes`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `character_attributes` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(characterAttributeType, characterAttributeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(characterAttributeType, characterAttributeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert for character_attributes")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(characterAttributeType, characterAttributeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to retrieve unique values for character_attributes")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for character_attributes")
	}

CacheNoHooks:
	if !cached {
		characterAttributeUpsertCacheMut.Lock()
		characterAttributeUpsertCache[key] = cache
		characterAttributeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single CharacterAttribute record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *CharacterAttribute) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single CharacterAttribute record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CharacterAttribute) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no CharacterAttribute provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), characterAttributePrimaryKeyMapping)
	sql := "DELETE FROM `character_attributes` WHERE `character_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from character_attributes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for character_attributes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q characterAttributeQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q characterAttributeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no characterAttributeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from character_attributes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for character_attributes")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CharacterAttributeSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CharacterAttributeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(characterAttributeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), characterAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `character_attributes` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, characterAttributePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from characterAttribute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for character_attributes")
	}

	if len(characterAttributeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *CharacterAttribute) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("boiler: no CharacterAttribute provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CharacterAttribute) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCharacterAttribute(ctx, exec, o.CharacterID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CharacterAttributeSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("boiler: empty CharacterAttributeSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CharacterAttributeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CharacterAttributeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), characterAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `character_attributes`.* FROM `character_attributes` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, characterAttributePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in CharacterAttributeSlice")
	}

	*o = slice

	return nil
}

// CharacterAttributeExistsG checks if the CharacterAttribute row exists.
func CharacterAttributeExistsG(ctx context.Context, characterID uint64) (bool, error) {
	return CharacterAttributeExists(ctx, boil.GetContextDB(), characterID)
}

// CharacterAttributeExists checks if the CharacterAttribute row exists.
func CharacterAttributeExists(ctx context.Context, exec boil.ContextExecutor, characterID uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `character_attributes` where `character_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, characterID)
	}
	row := exec.QueryRowContext(ctx, sql, characterID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if character_attributes exists")
	}

	return exists, nil
}
