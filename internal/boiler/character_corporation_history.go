// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CharacterCorporationHistory is an object representing the database table.
type CharacterCorporationHistory struct {
	ID            uint64    `boil:"id" json:"id" toml:"id" yaml:"id"`
	RecordID      uint      `boil:"record_id" json:"record_id" toml:"record_id" yaml:"record_id"`
	CorporationID uint      `boil:"corporation_id" json:"corporation_id" toml:"corporation_id" yaml:"corporation_id"`
	IsDeleted     int8      `boil:"is_deleted" json:"is_deleted" toml:"is_deleted" yaml:"is_deleted"`
	StartDate     time.Time `boil:"start_date" json:"start_date" toml:"start_date" yaml:"start_date"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *characterCorporationHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L characterCorporationHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CharacterCorporationHistoryColumns = struct {
	ID            string
	RecordID      string
	CorporationID string
	IsDeleted     string
	StartDate     string
	CreatedAt     string
}{
	ID:            "id",
	RecordID:      "record_id",
	CorporationID: "corporation_id",
	IsDeleted:     "is_deleted",
	StartDate:     "start_date",
	CreatedAt:     "created_at",
}

var CharacterCorporationHistoryTableColumns = struct {
	ID            string
	RecordID      string
	CorporationID string
	IsDeleted     string
	StartDate     string
	CreatedAt     string
}{
	ID:            "character_corporation_history.id",
	RecordID:      "character_corporation_history.record_id",
	CorporationID: "character_corporation_history.corporation_id",
	IsDeleted:     "character_corporation_history.is_deleted",
	StartDate:     "character_corporation_history.start_date",
	CreatedAt:     "character_corporation_history.created_at",
}

// Generated where

var CharacterCorporationHistoryWhere = struct {
	ID            whereHelperuint64
	RecordID      whereHelperuint
	CorporationID whereHelperuint
	IsDeleted     whereHelperint8
	StartDate     whereHelpertime_Time
	CreatedAt     whereHelpertime_Time
}{
	ID:            whereHelperuint64{field: "`character_corporation_history`.`id`"},
	RecordID:      whereHelperuint{field: "`character_corporation_history`.`record_id`"},
	CorporationID: whereHelperuint{field: "`character_corporation_history`.`corporation_id`"},
	IsDeleted:     whereHelperint8{field: "`character_corporation_history`.`is_deleted`"},
	StartDate:     whereHelpertime_Time{field: "`character_corporation_history`.`start_date`"},
	CreatedAt:     whereHelpertime_Time{field: "`character_corporation_history`.`created_at`"},
}

// CharacterCorporationHistoryRels is where relationship names are stored.
var CharacterCorporationHistoryRels = struct {
	IDCharacter string
}{
	IDCharacter: "IDCharacter",
}

// characterCorporationHistoryR is where relationships are stored.
type characterCorporationHistoryR struct {
	IDCharacter *Character `boil:"IDCharacter" json:"IDCharacter" toml:"IDCharacter" yaml:"IDCharacter"`
}

// NewStruct creates a new relationship struct
func (*characterCorporationHistoryR) NewStruct() *characterCorporationHistoryR {
	return &characterCorporationHistoryR{}
}

// characterCorporationHistoryL is where Load methods for each relationship are stored.
type characterCorporationHistoryL struct{}

var (
	characterCorporationHistoryAllColumns            = []string{"id", "record_id", "corporation_id", "is_deleted", "start_date", "created_at"}
	characterCorporationHistoryColumnsWithoutDefault = []string{"id", "record_id", "corporation_id", "start_date", "created_at"}
	characterCorporationHistoryColumnsWithDefault    = []string{"is_deleted"}
	characterCorporationHistoryPrimaryKeyColumns     = []string{"id", "record_id"}
)

type (
	// CharacterCorporationHistorySlice is an alias for a slice of pointers to CharacterCorporationHistory.
	// This should almost always be used instead of []CharacterCorporationHistory.
	CharacterCorporationHistorySlice []*CharacterCorporationHistory
	// CharacterCorporationHistoryHook is the signature for custom CharacterCorporationHistory hook methods
	CharacterCorporationHistoryHook func(context.Context, boil.ContextExecutor, *CharacterCorporationHistory) error

	characterCorporationHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	characterCorporationHistoryType                 = reflect.TypeOf(&CharacterCorporationHistory{})
	characterCorporationHistoryMapping              = queries.MakeStructMapping(characterCorporationHistoryType)
	characterCorporationHistoryPrimaryKeyMapping, _ = queries.BindMapping(characterCorporationHistoryType, characterCorporationHistoryMapping, characterCorporationHistoryPrimaryKeyColumns)
	characterCorporationHistoryInsertCacheMut       sync.RWMutex
	characterCorporationHistoryInsertCache          = make(map[string]insertCache)
	characterCorporationHistoryUpdateCacheMut       sync.RWMutex
	characterCorporationHistoryUpdateCache          = make(map[string]updateCache)
	characterCorporationHistoryUpsertCacheMut       sync.RWMutex
	characterCorporationHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var characterCorporationHistoryBeforeInsertHooks []CharacterCorporationHistoryHook
var characterCorporationHistoryBeforeUpdateHooks []CharacterCorporationHistoryHook
var characterCorporationHistoryBeforeDeleteHooks []CharacterCorporationHistoryHook
var characterCorporationHistoryBeforeUpsertHooks []CharacterCorporationHistoryHook

var characterCorporationHistoryAfterInsertHooks []CharacterCorporationHistoryHook
var characterCorporationHistoryAfterSelectHooks []CharacterCorporationHistoryHook
var characterCorporationHistoryAfterUpdateHooks []CharacterCorporationHistoryHook
var characterCorporationHistoryAfterDeleteHooks []CharacterCorporationHistoryHook
var characterCorporationHistoryAfterUpsertHooks []CharacterCorporationHistoryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CharacterCorporationHistory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterCorporationHistoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CharacterCorporationHistory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterCorporationHistoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CharacterCorporationHistory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterCorporationHistoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CharacterCorporationHistory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterCorporationHistoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CharacterCorporationHistory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterCorporationHistoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CharacterCorporationHistory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterCorporationHistoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CharacterCorporationHistory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterCorporationHistoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CharacterCorporationHistory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterCorporationHistoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CharacterCorporationHistory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterCorporationHistoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCharacterCorporationHistoryHook registers your hook function for all future operations.
func AddCharacterCorporationHistoryHook(hookPoint boil.HookPoint, characterCorporationHistoryHook CharacterCorporationHistoryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		characterCorporationHistoryBeforeInsertHooks = append(characterCorporationHistoryBeforeInsertHooks, characterCorporationHistoryHook)
	case boil.BeforeUpdateHook:
		characterCorporationHistoryBeforeUpdateHooks = append(characterCorporationHistoryBeforeUpdateHooks, characterCorporationHistoryHook)
	case boil.BeforeDeleteHook:
		characterCorporationHistoryBeforeDeleteHooks = append(characterCorporationHistoryBeforeDeleteHooks, characterCorporationHistoryHook)
	case boil.BeforeUpsertHook:
		characterCorporationHistoryBeforeUpsertHooks = append(characterCorporationHistoryBeforeUpsertHooks, characterCorporationHistoryHook)
	case boil.AfterInsertHook:
		characterCorporationHistoryAfterInsertHooks = append(characterCorporationHistoryAfterInsertHooks, characterCorporationHistoryHook)
	case boil.AfterSelectHook:
		characterCorporationHistoryAfterSelectHooks = append(characterCorporationHistoryAfterSelectHooks, characterCorporationHistoryHook)
	case boil.AfterUpdateHook:
		characterCorporationHistoryAfterUpdateHooks = append(characterCorporationHistoryAfterUpdateHooks, characterCorporationHistoryHook)
	case boil.AfterDeleteHook:
		characterCorporationHistoryAfterDeleteHooks = append(characterCorporationHistoryAfterDeleteHooks, characterCorporationHistoryHook)
	case boil.AfterUpsertHook:
		characterCorporationHistoryAfterUpsertHooks = append(characterCorporationHistoryAfterUpsertHooks, characterCorporationHistoryHook)
	}
}

// OneG returns a single characterCorporationHistory record from the query using the global executor.
func (q characterCorporationHistoryQuery) OneG(ctx context.Context) (*CharacterCorporationHistory, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single characterCorporationHistory record from the query.
func (q characterCorporationHistoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CharacterCorporationHistory, error) {
	o := &CharacterCorporationHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for character_corporation_history")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all CharacterCorporationHistory records from the query using the global executor.
func (q characterCorporationHistoryQuery) AllG(ctx context.Context) (CharacterCorporationHistorySlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all CharacterCorporationHistory records from the query.
func (q characterCorporationHistoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (CharacterCorporationHistorySlice, error) {
	var o []*CharacterCorporationHistory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to CharacterCorporationHistory slice")
	}

	if len(characterCorporationHistoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all CharacterCorporationHistory records in the query, and panics on error.
func (q characterCorporationHistoryQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all CharacterCorporationHistory records in the query.
func (q characterCorporationHistoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count character_corporation_history rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q characterCorporationHistoryQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q characterCorporationHistoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if character_corporation_history exists")
	}

	return count > 0, nil
}

// IDCharacter pointed to by the foreign key.
func (o *CharacterCorporationHistory) IDCharacter(mods ...qm.QueryMod) characterQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := Characters(queryMods...)
	queries.SetFrom(query.Query, "`characters`")

	return query
}

// LoadIDCharacter allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (characterCorporationHistoryL) LoadIDCharacter(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCharacterCorporationHistory interface{}, mods queries.Applicator) error {
	var slice []*CharacterCorporationHistory
	var object *CharacterCorporationHistory

	if singular {
		object = maybeCharacterCorporationHistory.(*CharacterCorporationHistory)
	} else {
		slice = *maybeCharacterCorporationHistory.(*[]*CharacterCorporationHistory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &characterCorporationHistoryR{}
		}
		args = append(args, object.ID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &characterCorporationHistoryR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`characters`),
		qm.WhereIn(`characters.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Character")
	}

	var resultSlice []*Character
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Character")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for characters")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for characters")
	}

	if len(characterCorporationHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDCharacter = foreign
		if foreign.R == nil {
			foreign.R = &characterR{}
		}
		foreign.R.IDCharacterCorporationHistories = append(foreign.R.IDCharacterCorporationHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.ID {
				local.R.IDCharacter = foreign
				if foreign.R == nil {
					foreign.R = &characterR{}
				}
				foreign.R.IDCharacterCorporationHistories = append(foreign.R.IDCharacterCorporationHistories, local)
				break
			}
		}
	}

	return nil
}

// SetIDCharacterG of the characterCorporationHistory to the related item.
// Sets o.R.IDCharacter to related.
// Adds o to related.R.IDCharacterCorporationHistories.
// Uses the global database handle.
func (o *CharacterCorporationHistory) SetIDCharacterG(ctx context.Context, insert bool, related *Character) error {
	return o.SetIDCharacter(ctx, boil.GetContextDB(), insert, related)
}

// SetIDCharacter of the characterCorporationHistory to the related item.
// Sets o.R.IDCharacter to related.
// Adds o to related.R.IDCharacterCorporationHistories.
func (o *CharacterCorporationHistory) SetIDCharacter(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Character) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `character_corporation_history` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"id"}),
		strmangle.WhereClause("`", "`", 0, characterCorporationHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID, o.RecordID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ID = related.ID
	if o.R == nil {
		o.R = &characterCorporationHistoryR{
			IDCharacter: related,
		}
	} else {
		o.R.IDCharacter = related
	}

	if related.R == nil {
		related.R = &characterR{
			IDCharacterCorporationHistories: CharacterCorporationHistorySlice{o},
		}
	} else {
		related.R.IDCharacterCorporationHistories = append(related.R.IDCharacterCorporationHistories, o)
	}

	return nil
}

// CharacterCorporationHistories retrieves all the records using an executor.
func CharacterCorporationHistories(mods ...qm.QueryMod) characterCorporationHistoryQuery {
	mods = append(mods, qm.From("`character_corporation_history`"))
	return characterCorporationHistoryQuery{NewQuery(mods...)}
}

// FindCharacterCorporationHistoryG retrieves a single record by ID.
func FindCharacterCorporationHistoryG(ctx context.Context, iD uint64, recordID uint, selectCols ...string) (*CharacterCorporationHistory, error) {
	return FindCharacterCorporationHistory(ctx, boil.GetContextDB(), iD, recordID, selectCols...)
}

// FindCharacterCorporationHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCharacterCorporationHistory(ctx context.Context, exec boil.ContextExecutor, iD uint64, recordID uint, selectCols ...string) (*CharacterCorporationHistory, error) {
	characterCorporationHistoryObj := &CharacterCorporationHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `character_corporation_history` where `id`=? AND `record_id`=?", sel,
	)

	q := queries.Raw(query, iD, recordID)

	err := q.Bind(ctx, exec, characterCorporationHistoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from character_corporation_history")
	}

	if err = characterCorporationHistoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return characterCorporationHistoryObj, err
	}

	return characterCorporationHistoryObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *CharacterCorporationHistory) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CharacterCorporationHistory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no character_corporation_history provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(characterCorporationHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	characterCorporationHistoryInsertCacheMut.RLock()
	cache, cached := characterCorporationHistoryInsertCache[key]
	characterCorporationHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			characterCorporationHistoryAllColumns,
			characterCorporationHistoryColumnsWithDefault,
			characterCorporationHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(characterCorporationHistoryType, characterCorporationHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(characterCorporationHistoryType, characterCorporationHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `character_corporation_history` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `character_corporation_history` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `character_corporation_history` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, characterCorporationHistoryPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into character_corporation_history")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
		o.RecordID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for character_corporation_history")
	}

CacheNoHooks:
	if !cached {
		characterCorporationHistoryInsertCacheMut.Lock()
		characterCorporationHistoryInsertCache[key] = cache
		characterCorporationHistoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single CharacterCorporationHistory record using the global executor.
// See Update for more documentation.
func (o *CharacterCorporationHistory) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the CharacterCorporationHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CharacterCorporationHistory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	characterCorporationHistoryUpdateCacheMut.RLock()
	cache, cached := characterCorporationHistoryUpdateCache[key]
	characterCorporationHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			characterCorporationHistoryAllColumns,
			characterCorporationHistoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update character_corporation_history, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `character_corporation_history` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, characterCorporationHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(characterCorporationHistoryType, characterCorporationHistoryMapping, append(wl, characterCorporationHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update character_corporation_history row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for character_corporation_history")
	}

	if !cached {
		characterCorporationHistoryUpdateCacheMut.Lock()
		characterCorporationHistoryUpdateCache[key] = cache
		characterCorporationHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q characterCorporationHistoryQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q characterCorporationHistoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for character_corporation_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for character_corporation_history")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CharacterCorporationHistorySlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CharacterCorporationHistorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), characterCorporationHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `character_corporation_history` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, characterCorporationHistoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in characterCorporationHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all characterCorporationHistory")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *CharacterCorporationHistory) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLCharacterCorporationHistoryUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CharacterCorporationHistory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no character_corporation_history provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(characterCorporationHistoryColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCharacterCorporationHistoryUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	characterCorporationHistoryUpsertCacheMut.RLock()
	cache, cached := characterCorporationHistoryUpsertCache[key]
	characterCorporationHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			characterCorporationHistoryAllColumns,
			characterCorporationHistoryColumnsWithDefault,
			characterCorporationHistoryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			characterCorporationHistoryAllColumns,
			characterCorporationHistoryPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("boiler: unable to upsert character_corporation_history, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`character_corporation_history`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `character_corporation_history` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(characterCorporationHistoryType, characterCorporationHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(characterCorporationHistoryType, characterCorporationHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert for character_corporation_history")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(characterCorporationHistoryType, characterCorporationHistoryMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to retrieve unique values for character_corporation_history")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for character_corporation_history")
	}

CacheNoHooks:
	if !cached {
		characterCorporationHistoryUpsertCacheMut.Lock()
		characterCorporationHistoryUpsertCache[key] = cache
		characterCorporationHistoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single CharacterCorporationHistory record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *CharacterCorporationHistory) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single CharacterCorporationHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CharacterCorporationHistory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no CharacterCorporationHistory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), characterCorporationHistoryPrimaryKeyMapping)
	sql := "DELETE FROM `character_corporation_history` WHERE `id`=? AND `record_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from character_corporation_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for character_corporation_history")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q characterCorporationHistoryQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q characterCorporationHistoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no characterCorporationHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from character_corporation_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for character_corporation_history")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CharacterCorporationHistorySlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CharacterCorporationHistorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(characterCorporationHistoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), characterCorporationHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `character_corporation_history` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, characterCorporationHistoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from characterCorporationHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for character_corporation_history")
	}

	if len(characterCorporationHistoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *CharacterCorporationHistory) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("boiler: no CharacterCorporationHistory provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CharacterCorporationHistory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCharacterCorporationHistory(ctx, exec, o.ID, o.RecordID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CharacterCorporationHistorySlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("boiler: empty CharacterCorporationHistorySlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CharacterCorporationHistorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CharacterCorporationHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), characterCorporationHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `character_corporation_history`.* FROM `character_corporation_history` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, characterCorporationHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in CharacterCorporationHistorySlice")
	}

	*o = slice

	return nil
}

// CharacterCorporationHistoryExistsG checks if the CharacterCorporationHistory row exists.
func CharacterCorporationHistoryExistsG(ctx context.Context, iD uint64, recordID uint) (bool, error) {
	return CharacterCorporationHistoryExists(ctx, boil.GetContextDB(), iD, recordID)
}

// CharacterCorporationHistoryExists checks if the CharacterCorporationHistory row exists.
func CharacterCorporationHistoryExists(ctx context.Context, exec boil.ContextExecutor, iD uint64, recordID uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `character_corporation_history` where `id`=? AND `record_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD, recordID)
	}
	row := exec.QueryRowContext(ctx, sql, iD, recordID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if character_corporation_history exists")
	}

	return exists, nil
}
