// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Type is an object representing the database table.
type Type struct {
	ID             uint         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name           string       `boil:"name" json:"name" toml:"name" yaml:"name"`
	GroupID        uint         `boil:"group_id" json:"group_id" toml:"group_id" yaml:"group_id"`
	Published      uint8        `boil:"published" json:"published" toml:"published" yaml:"published"`
	Capacity       float32      `boil:"capacity" json:"capacity" toml:"capacity" yaml:"capacity"`
	MarketGroupID  null.Uint    `boil:"market_group_id" json:"market_group_id,omitempty" toml:"market_group_id" yaml:"market_group_id,omitempty"`
	Mass           null.Float32 `boil:"mass" json:"mass,omitempty" toml:"mass" yaml:"mass,omitempty"`
	PackagedVolume float32      `boil:"packaged_volume" json:"packaged_volume" toml:"packaged_volume" yaml:"packaged_volume"`
	PortionSize    null.Int     `boil:"portion_size" json:"portion_size,omitempty" toml:"portion_size" yaml:"portion_size,omitempty"`
	Radius         null.Float32 `boil:"radius" json:"radius,omitempty" toml:"radius" yaml:"radius,omitempty"`
	Volume         float32      `boil:"volume" json:"volume" toml:"volume" yaml:"volume"`
	CreatedAt      time.Time    `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time    `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *typeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L typeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TypeColumns = struct {
	ID             string
	Name           string
	GroupID        string
	Published      string
	Capacity       string
	MarketGroupID  string
	Mass           string
	PackagedVolume string
	PortionSize    string
	Radius         string
	Volume         string
	CreatedAt      string
	UpdatedAt      string
}{
	ID:             "id",
	Name:           "name",
	GroupID:        "group_id",
	Published:      "published",
	Capacity:       "capacity",
	MarketGroupID:  "market_group_id",
	Mass:           "mass",
	PackagedVolume: "packaged_volume",
	PortionSize:    "portion_size",
	Radius:         "radius",
	Volume:         "volume",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
}

var TypeTableColumns = struct {
	ID             string
	Name           string
	GroupID        string
	Published      string
	Capacity       string
	MarketGroupID  string
	Mass           string
	PackagedVolume string
	PortionSize    string
	Radius         string
	Volume         string
	CreatedAt      string
	UpdatedAt      string
}{
	ID:             "types.id",
	Name:           "types.name",
	GroupID:        "types.group_id",
	Published:      "types.published",
	Capacity:       "types.capacity",
	MarketGroupID:  "types.market_group_id",
	Mass:           "types.mass",
	PackagedVolume: "types.packaged_volume",
	PortionSize:    "types.portion_size",
	Radius:         "types.radius",
	Volume:         "types.volume",
	CreatedAt:      "types.created_at",
	UpdatedAt:      "types.updated_at",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var TypeWhere = struct {
	ID             whereHelperuint
	Name           whereHelperstring
	GroupID        whereHelperuint
	Published      whereHelperuint8
	Capacity       whereHelperfloat32
	MarketGroupID  whereHelpernull_Uint
	Mass           whereHelpernull_Float32
	PackagedVolume whereHelperfloat32
	PortionSize    whereHelpernull_Int
	Radius         whereHelpernull_Float32
	Volume         whereHelperfloat32
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
}{
	ID:             whereHelperuint{field: "`types`.`id`"},
	Name:           whereHelperstring{field: "`types`.`name`"},
	GroupID:        whereHelperuint{field: "`types`.`group_id`"},
	Published:      whereHelperuint8{field: "`types`.`published`"},
	Capacity:       whereHelperfloat32{field: "`types`.`capacity`"},
	MarketGroupID:  whereHelpernull_Uint{field: "`types`.`market_group_id`"},
	Mass:           whereHelpernull_Float32{field: "`types`.`mass`"},
	PackagedVolume: whereHelperfloat32{field: "`types`.`packaged_volume`"},
	PortionSize:    whereHelpernull_Int{field: "`types`.`portion_size`"},
	Radius:         whereHelpernull_Float32{field: "`types`.`radius`"},
	Volume:         whereHelperfloat32{field: "`types`.`volume`"},
	CreatedAt:      whereHelpertime_Time{field: "`types`.`created_at`"},
	UpdatedAt:      whereHelpertime_Time{field: "`types`.`updated_at`"},
}

// TypeRels is where relationship names are stored.
var TypeRels = struct {
	ShipTypeCharacterFlyableShips string
	TypeAttributes                string
}{
	ShipTypeCharacterFlyableShips: "ShipTypeCharacterFlyableShips",
	TypeAttributes:                "TypeAttributes",
}

// typeR is where relationships are stored.
type typeR struct {
	ShipTypeCharacterFlyableShips CharacterFlyableShipSlice `boil:"ShipTypeCharacterFlyableShips" json:"ShipTypeCharacterFlyableShips" toml:"ShipTypeCharacterFlyableShips" yaml:"ShipTypeCharacterFlyableShips"`
	TypeAttributes                TypeAttributeSlice        `boil:"TypeAttributes" json:"TypeAttributes" toml:"TypeAttributes" yaml:"TypeAttributes"`
}

// NewStruct creates a new relationship struct
func (*typeR) NewStruct() *typeR {
	return &typeR{}
}

// typeL is where Load methods for each relationship are stored.
type typeL struct{}

var (
	typeAllColumns            = []string{"id", "name", "group_id", "published", "capacity", "market_group_id", "mass", "packaged_volume", "portion_size", "radius", "volume", "created_at", "updated_at"}
	typeColumnsWithoutDefault = []string{"id", "name", "group_id", "market_group_id", "portion_size", "radius", "created_at", "updated_at"}
	typeColumnsWithDefault    = []string{"published", "capacity", "mass", "packaged_volume", "volume"}
	typePrimaryKeyColumns     = []string{"id"}
)

type (
	// TypeSlice is an alias for a slice of pointers to Type.
	// This should almost always be used instead of []Type.
	TypeSlice []*Type
	// TypeHook is the signature for custom Type hook methods
	TypeHook func(context.Context, boil.ContextExecutor, *Type) error

	typeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	typeType                 = reflect.TypeOf(&Type{})
	typeMapping              = queries.MakeStructMapping(typeType)
	typePrimaryKeyMapping, _ = queries.BindMapping(typeType, typeMapping, typePrimaryKeyColumns)
	typeInsertCacheMut       sync.RWMutex
	typeInsertCache          = make(map[string]insertCache)
	typeUpdateCacheMut       sync.RWMutex
	typeUpdateCache          = make(map[string]updateCache)
	typeUpsertCacheMut       sync.RWMutex
	typeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var typeBeforeInsertHooks []TypeHook
var typeBeforeUpdateHooks []TypeHook
var typeBeforeDeleteHooks []TypeHook
var typeBeforeUpsertHooks []TypeHook

var typeAfterInsertHooks []TypeHook
var typeAfterSelectHooks []TypeHook
var typeAfterUpdateHooks []TypeHook
var typeAfterDeleteHooks []TypeHook
var typeAfterUpsertHooks []TypeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Type) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range typeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Type) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range typeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Type) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range typeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Type) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range typeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Type) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range typeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Type) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range typeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Type) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range typeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Type) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range typeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Type) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range typeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTypeHook registers your hook function for all future operations.
func AddTypeHook(hookPoint boil.HookPoint, typeHook TypeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		typeBeforeInsertHooks = append(typeBeforeInsertHooks, typeHook)
	case boil.BeforeUpdateHook:
		typeBeforeUpdateHooks = append(typeBeforeUpdateHooks, typeHook)
	case boil.BeforeDeleteHook:
		typeBeforeDeleteHooks = append(typeBeforeDeleteHooks, typeHook)
	case boil.BeforeUpsertHook:
		typeBeforeUpsertHooks = append(typeBeforeUpsertHooks, typeHook)
	case boil.AfterInsertHook:
		typeAfterInsertHooks = append(typeAfterInsertHooks, typeHook)
	case boil.AfterSelectHook:
		typeAfterSelectHooks = append(typeAfterSelectHooks, typeHook)
	case boil.AfterUpdateHook:
		typeAfterUpdateHooks = append(typeAfterUpdateHooks, typeHook)
	case boil.AfterDeleteHook:
		typeAfterDeleteHooks = append(typeAfterDeleteHooks, typeHook)
	case boil.AfterUpsertHook:
		typeAfterUpsertHooks = append(typeAfterUpsertHooks, typeHook)
	}
}

// OneG returns a single type record from the query using the global executor.
func (q typeQuery) OneG(ctx context.Context) (*Type, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single type record from the query.
func (q typeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Type, error) {
	o := &Type{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for types")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Type records from the query using the global executor.
func (q typeQuery) AllG(ctx context.Context) (TypeSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Type records from the query.
func (q typeQuery) All(ctx context.Context, exec boil.ContextExecutor) (TypeSlice, error) {
	var o []*Type

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Type slice")
	}

	if len(typeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Type records in the query, and panics on error.
func (q typeQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Type records in the query.
func (q typeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count types rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q typeQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q typeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if types exists")
	}

	return count > 0, nil
}

// ShipTypeCharacterFlyableShips retrieves all the character_flyable_ship's CharacterFlyableShips with an executor via ship_type_id column.
func (o *Type) ShipTypeCharacterFlyableShips(mods ...qm.QueryMod) characterFlyableShipQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`character_flyable_ships`.`ship_type_id`=?", o.ID),
	)

	query := CharacterFlyableShips(queryMods...)
	queries.SetFrom(query.Query, "`character_flyable_ships`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`character_flyable_ships`.*"})
	}

	return query
}

// TypeAttributes retrieves all the type_attribute's TypeAttributes with an executor.
func (o *Type) TypeAttributes(mods ...qm.QueryMod) typeAttributeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`type_attributes`.`type_id`=?", o.ID),
	)

	query := TypeAttributes(queryMods...)
	queries.SetFrom(query.Query, "`type_attributes`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`type_attributes`.*"})
	}

	return query
}

// LoadShipTypeCharacterFlyableShips allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (typeL) LoadShipTypeCharacterFlyableShips(ctx context.Context, e boil.ContextExecutor, singular bool, maybeType interface{}, mods queries.Applicator) error {
	var slice []*Type
	var object *Type

	if singular {
		object = maybeType.(*Type)
	} else {
		slice = *maybeType.(*[]*Type)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &typeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &typeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`character_flyable_ships`),
		qm.WhereIn(`character_flyable_ships.ship_type_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load character_flyable_ships")
	}

	var resultSlice []*CharacterFlyableShip
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice character_flyable_ships")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on character_flyable_ships")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for character_flyable_ships")
	}

	if len(characterFlyableShipAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ShipTypeCharacterFlyableShips = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &characterFlyableShipR{}
			}
			foreign.R.ShipType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ShipTypeID {
				local.R.ShipTypeCharacterFlyableShips = append(local.R.ShipTypeCharacterFlyableShips, foreign)
				if foreign.R == nil {
					foreign.R = &characterFlyableShipR{}
				}
				foreign.R.ShipType = local
				break
			}
		}
	}

	return nil
}

// LoadTypeAttributes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (typeL) LoadTypeAttributes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeType interface{}, mods queries.Applicator) error {
	var slice []*Type
	var object *Type

	if singular {
		object = maybeType.(*Type)
	} else {
		slice = *maybeType.(*[]*Type)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &typeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &typeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`type_attributes`),
		qm.WhereIn(`type_attributes.type_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load type_attributes")
	}

	var resultSlice []*TypeAttribute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice type_attributes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on type_attributes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for type_attributes")
	}

	if len(typeAttributeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TypeAttributes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &typeAttributeR{}
			}
			foreign.R.Type = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TypeID {
				local.R.TypeAttributes = append(local.R.TypeAttributes, foreign)
				if foreign.R == nil {
					foreign.R = &typeAttributeR{}
				}
				foreign.R.Type = local
				break
			}
		}
	}

	return nil
}

// AddShipTypeCharacterFlyableShipsG adds the given related objects to the existing relationships
// of the type, optionally inserting them as new records.
// Appends related to o.R.ShipTypeCharacterFlyableShips.
// Sets related.R.ShipType appropriately.
// Uses the global database handle.
func (o *Type) AddShipTypeCharacterFlyableShipsG(ctx context.Context, insert bool, related ...*CharacterFlyableShip) error {
	return o.AddShipTypeCharacterFlyableShips(ctx, boil.GetContextDB(), insert, related...)
}

// AddShipTypeCharacterFlyableShips adds the given related objects to the existing relationships
// of the type, optionally inserting them as new records.
// Appends related to o.R.ShipTypeCharacterFlyableShips.
// Sets related.R.ShipType appropriately.
func (o *Type) AddShipTypeCharacterFlyableShips(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CharacterFlyableShip) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ShipTypeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `character_flyable_ships` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ship_type_id"}),
				strmangle.WhereClause("`", "`", 0, characterFlyableShipPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.CharacterID, rel.ShipTypeID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ShipTypeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &typeR{
			ShipTypeCharacterFlyableShips: related,
		}
	} else {
		o.R.ShipTypeCharacterFlyableShips = append(o.R.ShipTypeCharacterFlyableShips, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &characterFlyableShipR{
				ShipType: o,
			}
		} else {
			rel.R.ShipType = o
		}
	}
	return nil
}

// AddTypeAttributesG adds the given related objects to the existing relationships
// of the type, optionally inserting them as new records.
// Appends related to o.R.TypeAttributes.
// Sets related.R.Type appropriately.
// Uses the global database handle.
func (o *Type) AddTypeAttributesG(ctx context.Context, insert bool, related ...*TypeAttribute) error {
	return o.AddTypeAttributes(ctx, boil.GetContextDB(), insert, related...)
}

// AddTypeAttributes adds the given related objects to the existing relationships
// of the type, optionally inserting them as new records.
// Appends related to o.R.TypeAttributes.
// Sets related.R.Type appropriately.
func (o *Type) AddTypeAttributes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TypeAttribute) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TypeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `type_attributes` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"type_id"}),
				strmangle.WhereClause("`", "`", 0, typeAttributePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.TypeID, rel.AttributeID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TypeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &typeR{
			TypeAttributes: related,
		}
	} else {
		o.R.TypeAttributes = append(o.R.TypeAttributes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &typeAttributeR{
				Type: o,
			}
		} else {
			rel.R.Type = o
		}
	}
	return nil
}

// Types retrieves all the records using an executor.
func Types(mods ...qm.QueryMod) typeQuery {
	mods = append(mods, qm.From("`types`"))
	return typeQuery{NewQuery(mods...)}
}

// FindTypeG retrieves a single record by ID.
func FindTypeG(ctx context.Context, iD uint, selectCols ...string) (*Type, error) {
	return FindType(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindType(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*Type, error) {
	typeObj := &Type{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `types` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, typeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from types")
	}

	if err = typeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return typeObj, err
	}

	return typeObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Type) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Type) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no types provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(typeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	typeInsertCacheMut.RLock()
	cache, cached := typeInsertCache[key]
	typeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			typeAllColumns,
			typeColumnsWithDefault,
			typeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(typeType, typeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(typeType, typeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `types` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `types` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `types` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, typePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into types")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for types")
	}

CacheNoHooks:
	if !cached {
		typeInsertCacheMut.Lock()
		typeInsertCache[key] = cache
		typeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Type record using the global executor.
// See Update for more documentation.
func (o *Type) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Type.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Type) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	typeUpdateCacheMut.RLock()
	cache, cached := typeUpdateCache[key]
	typeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			typeAllColumns,
			typePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update types, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `types` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, typePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(typeType, typeMapping, append(wl, typePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update types row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for types")
	}

	if !cached {
		typeUpdateCacheMut.Lock()
		typeUpdateCache[key] = cache
		typeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q typeQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q typeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for types")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TypeSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TypeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), typePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `types` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, typePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in type slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all type")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Type) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLTypeUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Type) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no types provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(typeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTypeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	typeUpsertCacheMut.RLock()
	cache, cached := typeUpsertCache[key]
	typeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			typeAllColumns,
			typeColumnsWithDefault,
			typeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			typeAllColumns,
			typePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("boiler: unable to upsert types, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`types`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `types` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(typeType, typeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(typeType, typeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert for types")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(typeType, typeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to retrieve unique values for types")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for types")
	}

CacheNoHooks:
	if !cached {
		typeUpsertCacheMut.Lock()
		typeUpsertCache[key] = cache
		typeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Type record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Type) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Type record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Type) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no Type provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), typePrimaryKeyMapping)
	sql := "DELETE FROM `types` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for types")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q typeQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q typeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no typeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for types")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TypeSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TypeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(typeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), typePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `types` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, typePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from type slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for types")
	}

	if len(typeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Type) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("boiler: no Type provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Type) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindType(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TypeSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("boiler: empty TypeSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TypeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), typePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `types`.* FROM `types` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, typePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in TypeSlice")
	}

	*o = slice

	return nil
}

// TypeExistsG checks if the Type row exists.
func TypeExistsG(ctx context.Context, iD uint) (bool, error) {
	return TypeExists(ctx, boil.GetContextDB(), iD)
}

// TypeExists checks if the Type row exists.
func TypeExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `types` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if types exists")
	}

	return exists, nil
}
