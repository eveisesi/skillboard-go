// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Faction is an object representing the database table.
type Faction struct {
	ID                   uint      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name                 string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	IsUnique             uint8     `boil:"is_unique" json:"is_unique" toml:"is_unique" yaml:"is_unique"`
	SizeFactor           float32   `boil:"size_factor" json:"size_factor" toml:"size_factor" yaml:"size_factor"`
	StationCount         uint      `boil:"station_count" json:"station_count" toml:"station_count" yaml:"station_count"`
	StationSystemCount   uint      `boil:"station_system_count" json:"station_system_count" toml:"station_system_count" yaml:"station_system_count"`
	CorporationID        null.Uint `boil:"corporation_id" json:"corporation_id,omitempty" toml:"corporation_id" yaml:"corporation_id,omitempty"`
	MilitiaCorporationID null.Uint `boil:"militia_corporation_id" json:"militia_corporation_id,omitempty" toml:"militia_corporation_id" yaml:"militia_corporation_id,omitempty"`
	SolarSystemID        null.Uint `boil:"solar_system_id" json:"solar_system_id,omitempty" toml:"solar_system_id" yaml:"solar_system_id,omitempty"`
	CreatedAt            time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt            time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *factionR `boil:"r" json:"r" toml:"r" yaml:"r"`
	L factionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FactionColumns = struct {
	ID                   string
	Name                 string
	IsUnique             string
	SizeFactor           string
	StationCount         string
	StationSystemCount   string
	CorporationID        string
	MilitiaCorporationID string
	SolarSystemID        string
	CreatedAt            string
	UpdatedAt            string
}{
	ID:                   "id",
	Name:                 "name",
	IsUnique:             "is_unique",
	SizeFactor:           "size_factor",
	StationCount:         "station_count",
	StationSystemCount:   "station_system_count",
	CorporationID:        "corporation_id",
	MilitiaCorporationID: "militia_corporation_id",
	SolarSystemID:        "solar_system_id",
	CreatedAt:            "created_at",
	UpdatedAt:            "updated_at",
}

var FactionTableColumns = struct {
	ID                   string
	Name                 string
	IsUnique             string
	SizeFactor           string
	StationCount         string
	StationSystemCount   string
	CorporationID        string
	MilitiaCorporationID string
	SolarSystemID        string
	CreatedAt            string
	UpdatedAt            string
}{
	ID:                   "factions.id",
	Name:                 "factions.name",
	IsUnique:             "factions.is_unique",
	SizeFactor:           "factions.size_factor",
	StationCount:         "factions.station_count",
	StationSystemCount:   "factions.station_system_count",
	CorporationID:        "factions.corporation_id",
	MilitiaCorporationID: "factions.militia_corporation_id",
	SolarSystemID:        "factions.solar_system_id",
	CreatedAt:            "factions.created_at",
	UpdatedAt:            "factions.updated_at",
}

// Generated where

var FactionWhere = struct {
	ID                   whereHelperuint
	Name                 whereHelperstring
	IsUnique             whereHelperuint8
	SizeFactor           whereHelperfloat32
	StationCount         whereHelperuint
	StationSystemCount   whereHelperuint
	CorporationID        whereHelpernull_Uint
	MilitiaCorporationID whereHelpernull_Uint
	SolarSystemID        whereHelpernull_Uint
	CreatedAt            whereHelpertime_Time
	UpdatedAt            whereHelpertime_Time
}{
	ID:                   whereHelperuint{field: "`factions`.`id`"},
	Name:                 whereHelperstring{field: "`factions`.`name`"},
	IsUnique:             whereHelperuint8{field: "`factions`.`is_unique`"},
	SizeFactor:           whereHelperfloat32{field: "`factions`.`size_factor`"},
	StationCount:         whereHelperuint{field: "`factions`.`station_count`"},
	StationSystemCount:   whereHelperuint{field: "`factions`.`station_system_count`"},
	CorporationID:        whereHelpernull_Uint{field: "`factions`.`corporation_id`"},
	MilitiaCorporationID: whereHelpernull_Uint{field: "`factions`.`militia_corporation_id`"},
	SolarSystemID:        whereHelpernull_Uint{field: "`factions`.`solar_system_id`"},
	CreatedAt:            whereHelpertime_Time{field: "`factions`.`created_at`"},
	UpdatedAt:            whereHelpertime_Time{field: "`factions`.`updated_at`"},
}

// FactionRels is where relationship names are stored.
var FactionRels = struct {
}{}

// factionR is where relationships are stored.
type factionR struct {
}

// NewStruct creates a new relationship struct
func (*factionR) NewStruct() *factionR {
	return &factionR{}
}

// factionL is where Load methods for each relationship are stored.
type factionL struct{}

var (
	factionAllColumns            = []string{"id", "name", "is_unique", "size_factor", "station_count", "station_system_count", "corporation_id", "militia_corporation_id", "solar_system_id", "created_at", "updated_at"}
	factionColumnsWithoutDefault = []string{"id", "name", "size_factor", "station_count", "station_system_count", "corporation_id", "militia_corporation_id", "solar_system_id", "created_at", "updated_at"}
	factionColumnsWithDefault    = []string{"is_unique"}
	factionPrimaryKeyColumns     = []string{"id"}
)

type (
	// FactionSlice is an alias for a slice of pointers to Faction.
	// This should almost always be used instead of []Faction.
	FactionSlice []*Faction
	// FactionHook is the signature for custom Faction hook methods
	FactionHook func(context.Context, boil.ContextExecutor, *Faction) error

	factionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	factionType                 = reflect.TypeOf(&Faction{})
	factionMapping              = queries.MakeStructMapping(factionType)
	factionPrimaryKeyMapping, _ = queries.BindMapping(factionType, factionMapping, factionPrimaryKeyColumns)
	factionInsertCacheMut       sync.RWMutex
	factionInsertCache          = make(map[string]insertCache)
	factionUpdateCacheMut       sync.RWMutex
	factionUpdateCache          = make(map[string]updateCache)
	factionUpsertCacheMut       sync.RWMutex
	factionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var factionBeforeInsertHooks []FactionHook
var factionBeforeUpdateHooks []FactionHook
var factionBeforeDeleteHooks []FactionHook
var factionBeforeUpsertHooks []FactionHook

var factionAfterInsertHooks []FactionHook
var factionAfterSelectHooks []FactionHook
var factionAfterUpdateHooks []FactionHook
var factionAfterDeleteHooks []FactionHook
var factionAfterUpsertHooks []FactionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Faction) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range factionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Faction) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range factionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Faction) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range factionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Faction) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range factionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Faction) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range factionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Faction) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range factionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Faction) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range factionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Faction) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range factionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Faction) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range factionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFactionHook registers your hook function for all future operations.
func AddFactionHook(hookPoint boil.HookPoint, factionHook FactionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		factionBeforeInsertHooks = append(factionBeforeInsertHooks, factionHook)
	case boil.BeforeUpdateHook:
		factionBeforeUpdateHooks = append(factionBeforeUpdateHooks, factionHook)
	case boil.BeforeDeleteHook:
		factionBeforeDeleteHooks = append(factionBeforeDeleteHooks, factionHook)
	case boil.BeforeUpsertHook:
		factionBeforeUpsertHooks = append(factionBeforeUpsertHooks, factionHook)
	case boil.AfterInsertHook:
		factionAfterInsertHooks = append(factionAfterInsertHooks, factionHook)
	case boil.AfterSelectHook:
		factionAfterSelectHooks = append(factionAfterSelectHooks, factionHook)
	case boil.AfterUpdateHook:
		factionAfterUpdateHooks = append(factionAfterUpdateHooks, factionHook)
	case boil.AfterDeleteHook:
		factionAfterDeleteHooks = append(factionAfterDeleteHooks, factionHook)
	case boil.AfterUpsertHook:
		factionAfterUpsertHooks = append(factionAfterUpsertHooks, factionHook)
	}
}

// OneG returns a single faction record from the query using the global executor.
func (q factionQuery) OneG(ctx context.Context) (*Faction, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single faction record from the query.
func (q factionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Faction, error) {
	o := &Faction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for factions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Faction records from the query using the global executor.
func (q factionQuery) AllG(ctx context.Context) (FactionSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Faction records from the query.
func (q factionQuery) All(ctx context.Context, exec boil.ContextExecutor) (FactionSlice, error) {
	var o []*Faction

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Faction slice")
	}

	if len(factionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Faction records in the query, and panics on error.
func (q factionQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Faction records in the query.
func (q factionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count factions rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q factionQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q factionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if factions exists")
	}

	return count > 0, nil
}

// Factions retrieves all the records using an executor.
func Factions(mods ...qm.QueryMod) factionQuery {
	mods = append(mods, qm.From("`factions`"))
	return factionQuery{NewQuery(mods...)}
}

// FindFactionG retrieves a single record by ID.
func FindFactionG(ctx context.Context, iD uint, selectCols ...string) (*Faction, error) {
	return FindFaction(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindFaction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFaction(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*Faction, error) {
	factionObj := &Faction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `factions` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, factionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from factions")
	}

	if err = factionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return factionObj, err
	}

	return factionObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Faction) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Faction) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no factions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(factionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	factionInsertCacheMut.RLock()
	cache, cached := factionInsertCache[key]
	factionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			factionAllColumns,
			factionColumnsWithDefault,
			factionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(factionType, factionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(factionType, factionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `factions` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `factions` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `factions` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, factionPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into factions")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for factions")
	}

CacheNoHooks:
	if !cached {
		factionInsertCacheMut.Lock()
		factionInsertCache[key] = cache
		factionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Faction record using the global executor.
// See Update for more documentation.
func (o *Faction) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Faction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Faction) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	factionUpdateCacheMut.RLock()
	cache, cached := factionUpdateCache[key]
	factionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			factionAllColumns,
			factionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update factions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `factions` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, factionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(factionType, factionMapping, append(wl, factionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update factions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for factions")
	}

	if !cached {
		factionUpdateCacheMut.Lock()
		factionUpdateCache[key] = cache
		factionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q factionQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q factionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for factions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for factions")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o FactionSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FactionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), factionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `factions` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, factionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in faction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all faction")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Faction) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLFactionUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Faction) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no factions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(factionColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLFactionUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	factionUpsertCacheMut.RLock()
	cache, cached := factionUpsertCache[key]
	factionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			factionAllColumns,
			factionColumnsWithDefault,
			factionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			factionAllColumns,
			factionPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("boiler: unable to upsert factions, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`factions`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `factions` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(factionType, factionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(factionType, factionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert for factions")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(factionType, factionMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to retrieve unique values for factions")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for factions")
	}

CacheNoHooks:
	if !cached {
		factionUpsertCacheMut.Lock()
		factionUpsertCache[key] = cache
		factionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Faction record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Faction) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Faction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Faction) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no Faction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), factionPrimaryKeyMapping)
	sql := "DELETE FROM `factions` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from factions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for factions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q factionQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q factionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no factionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from factions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for factions")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o FactionSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FactionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(factionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), factionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `factions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, factionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from faction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for factions")
	}

	if len(factionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Faction) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("boiler: no Faction provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Faction) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFaction(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FactionSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("boiler: empty FactionSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FactionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FactionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), factionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `factions`.* FROM `factions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, factionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in FactionSlice")
	}

	*o = slice

	return nil
}

// FactionExistsG checks if the Faction row exists.
func FactionExistsG(ctx context.Context, iD uint) (bool, error) {
	return FactionExists(ctx, boil.GetContextDB(), iD)
}

// FactionExists checks if the Faction row exists.
func FactionExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `factions` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if factions exists")
	}

	return exists, nil
}
