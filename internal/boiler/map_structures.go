// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MapStructure is an object representing the database table.
type MapStructure struct {
	ID            uint64    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name          string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	SolarSystemID uint      `boil:"solar_system_id" json:"solar_system_id" toml:"solar_system_id" yaml:"solar_system_id"`
	TypeID        uint      `boil:"type_id" json:"type_id" toml:"type_id" yaml:"type_id"`
	OwnerID       uint      `boil:"owner_id" json:"owner_id" toml:"owner_id" yaml:"owner_id"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *mapStructureR `boil:"r" json:"r" toml:"r" yaml:"r"`
	L mapStructureL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MapStructureColumns = struct {
	ID            string
	Name          string
	SolarSystemID string
	TypeID        string
	OwnerID       string
	CreatedAt     string
	UpdatedAt     string
}{
	ID:            "id",
	Name:          "name",
	SolarSystemID: "solar_system_id",
	TypeID:        "type_id",
	OwnerID:       "owner_id",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
}

var MapStructureTableColumns = struct {
	ID            string
	Name          string
	SolarSystemID string
	TypeID        string
	OwnerID       string
	CreatedAt     string
	UpdatedAt     string
}{
	ID:            "map_structures.id",
	Name:          "map_structures.name",
	SolarSystemID: "map_structures.solar_system_id",
	TypeID:        "map_structures.type_id",
	OwnerID:       "map_structures.owner_id",
	CreatedAt:     "map_structures.created_at",
	UpdatedAt:     "map_structures.updated_at",
}

// Generated where

var MapStructureWhere = struct {
	ID            whereHelperuint64
	Name          whereHelperstring
	SolarSystemID whereHelperuint
	TypeID        whereHelperuint
	OwnerID       whereHelperuint
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
}{
	ID:            whereHelperuint64{field: "`map_structures`.`id`"},
	Name:          whereHelperstring{field: "`map_structures`.`name`"},
	SolarSystemID: whereHelperuint{field: "`map_structures`.`solar_system_id`"},
	TypeID:        whereHelperuint{field: "`map_structures`.`type_id`"},
	OwnerID:       whereHelperuint{field: "`map_structures`.`owner_id`"},
	CreatedAt:     whereHelpertime_Time{field: "`map_structures`.`created_at`"},
	UpdatedAt:     whereHelpertime_Time{field: "`map_structures`.`updated_at`"},
}

// MapStructureRels is where relationship names are stored.
var MapStructureRels = struct {
}{}

// mapStructureR is where relationships are stored.
type mapStructureR struct {
}

// NewStruct creates a new relationship struct
func (*mapStructureR) NewStruct() *mapStructureR {
	return &mapStructureR{}
}

// mapStructureL is where Load methods for each relationship are stored.
type mapStructureL struct{}

var (
	mapStructureAllColumns            = []string{"id", "name", "solar_system_id", "type_id", "owner_id", "created_at", "updated_at"}
	mapStructureColumnsWithoutDefault = []string{"id", "name", "solar_system_id", "type_id", "owner_id", "created_at", "updated_at"}
	mapStructureColumnsWithDefault    = []string{}
	mapStructurePrimaryKeyColumns     = []string{"id"}
)

type (
	// MapStructureSlice is an alias for a slice of pointers to MapStructure.
	// This should almost always be used instead of []MapStructure.
	MapStructureSlice []*MapStructure
	// MapStructureHook is the signature for custom MapStructure hook methods
	MapStructureHook func(context.Context, boil.ContextExecutor, *MapStructure) error

	mapStructureQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mapStructureType                 = reflect.TypeOf(&MapStructure{})
	mapStructureMapping              = queries.MakeStructMapping(mapStructureType)
	mapStructurePrimaryKeyMapping, _ = queries.BindMapping(mapStructureType, mapStructureMapping, mapStructurePrimaryKeyColumns)
	mapStructureInsertCacheMut       sync.RWMutex
	mapStructureInsertCache          = make(map[string]insertCache)
	mapStructureUpdateCacheMut       sync.RWMutex
	mapStructureUpdateCache          = make(map[string]updateCache)
	mapStructureUpsertCacheMut       sync.RWMutex
	mapStructureUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mapStructureBeforeInsertHooks []MapStructureHook
var mapStructureBeforeUpdateHooks []MapStructureHook
var mapStructureBeforeDeleteHooks []MapStructureHook
var mapStructureBeforeUpsertHooks []MapStructureHook

var mapStructureAfterInsertHooks []MapStructureHook
var mapStructureAfterSelectHooks []MapStructureHook
var mapStructureAfterUpdateHooks []MapStructureHook
var mapStructureAfterDeleteHooks []MapStructureHook
var mapStructureAfterUpsertHooks []MapStructureHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MapStructure) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mapStructureBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MapStructure) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mapStructureBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MapStructure) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mapStructureBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MapStructure) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mapStructureBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MapStructure) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mapStructureAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MapStructure) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mapStructureAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MapStructure) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mapStructureAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MapStructure) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mapStructureAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MapStructure) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mapStructureAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMapStructureHook registers your hook function for all future operations.
func AddMapStructureHook(hookPoint boil.HookPoint, mapStructureHook MapStructureHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		mapStructureBeforeInsertHooks = append(mapStructureBeforeInsertHooks, mapStructureHook)
	case boil.BeforeUpdateHook:
		mapStructureBeforeUpdateHooks = append(mapStructureBeforeUpdateHooks, mapStructureHook)
	case boil.BeforeDeleteHook:
		mapStructureBeforeDeleteHooks = append(mapStructureBeforeDeleteHooks, mapStructureHook)
	case boil.BeforeUpsertHook:
		mapStructureBeforeUpsertHooks = append(mapStructureBeforeUpsertHooks, mapStructureHook)
	case boil.AfterInsertHook:
		mapStructureAfterInsertHooks = append(mapStructureAfterInsertHooks, mapStructureHook)
	case boil.AfterSelectHook:
		mapStructureAfterSelectHooks = append(mapStructureAfterSelectHooks, mapStructureHook)
	case boil.AfterUpdateHook:
		mapStructureAfterUpdateHooks = append(mapStructureAfterUpdateHooks, mapStructureHook)
	case boil.AfterDeleteHook:
		mapStructureAfterDeleteHooks = append(mapStructureAfterDeleteHooks, mapStructureHook)
	case boil.AfterUpsertHook:
		mapStructureAfterUpsertHooks = append(mapStructureAfterUpsertHooks, mapStructureHook)
	}
}

// OneG returns a single mapStructure record from the query using the global executor.
func (q mapStructureQuery) OneG(ctx context.Context) (*MapStructure, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single mapStructure record from the query.
func (q mapStructureQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MapStructure, error) {
	o := &MapStructure{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for map_structures")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all MapStructure records from the query using the global executor.
func (q mapStructureQuery) AllG(ctx context.Context) (MapStructureSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all MapStructure records from the query.
func (q mapStructureQuery) All(ctx context.Context, exec boil.ContextExecutor) (MapStructureSlice, error) {
	var o []*MapStructure

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to MapStructure slice")
	}

	if len(mapStructureAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all MapStructure records in the query, and panics on error.
func (q mapStructureQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all MapStructure records in the query.
func (q mapStructureQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count map_structures rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q mapStructureQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q mapStructureQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if map_structures exists")
	}

	return count > 0, nil
}

// MapStructures retrieves all the records using an executor.
func MapStructures(mods ...qm.QueryMod) mapStructureQuery {
	mods = append(mods, qm.From("`map_structures`"))
	return mapStructureQuery{NewQuery(mods...)}
}

// FindMapStructureG retrieves a single record by ID.
func FindMapStructureG(ctx context.Context, iD uint64, selectCols ...string) (*MapStructure, error) {
	return FindMapStructure(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindMapStructure retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMapStructure(ctx context.Context, exec boil.ContextExecutor, iD uint64, selectCols ...string) (*MapStructure, error) {
	mapStructureObj := &MapStructure{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `map_structures` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, mapStructureObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from map_structures")
	}

	if err = mapStructureObj.doAfterSelectHooks(ctx, exec); err != nil {
		return mapStructureObj, err
	}

	return mapStructureObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *MapStructure) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MapStructure) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no map_structures provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mapStructureColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mapStructureInsertCacheMut.RLock()
	cache, cached := mapStructureInsertCache[key]
	mapStructureInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mapStructureAllColumns,
			mapStructureColumnsWithDefault,
			mapStructureColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mapStructureType, mapStructureMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mapStructureType, mapStructureMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `map_structures` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `map_structures` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `map_structures` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, mapStructurePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into map_structures")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for map_structures")
	}

CacheNoHooks:
	if !cached {
		mapStructureInsertCacheMut.Lock()
		mapStructureInsertCache[key] = cache
		mapStructureInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single MapStructure record using the global executor.
// See Update for more documentation.
func (o *MapStructure) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the MapStructure.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MapStructure) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mapStructureUpdateCacheMut.RLock()
	cache, cached := mapStructureUpdateCache[key]
	mapStructureUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mapStructureAllColumns,
			mapStructurePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update map_structures, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `map_structures` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, mapStructurePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mapStructureType, mapStructureMapping, append(wl, mapStructurePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update map_structures row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for map_structures")
	}

	if !cached {
		mapStructureUpdateCacheMut.Lock()
		mapStructureUpdateCache[key] = cache
		mapStructureUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q mapStructureQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q mapStructureQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for map_structures")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for map_structures")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MapStructureSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MapStructureSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mapStructurePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `map_structures` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mapStructurePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in mapStructure slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all mapStructure")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *MapStructure) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLMapStructureUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MapStructure) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no map_structures provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mapStructureColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLMapStructureUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mapStructureUpsertCacheMut.RLock()
	cache, cached := mapStructureUpsertCache[key]
	mapStructureUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mapStructureAllColumns,
			mapStructureColumnsWithDefault,
			mapStructureColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			mapStructureAllColumns,
			mapStructurePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("boiler: unable to upsert map_structures, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`map_structures`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `map_structures` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(mapStructureType, mapStructureMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mapStructureType, mapStructureMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert for map_structures")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(mapStructureType, mapStructureMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to retrieve unique values for map_structures")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for map_structures")
	}

CacheNoHooks:
	if !cached {
		mapStructureUpsertCacheMut.Lock()
		mapStructureUpsertCache[key] = cache
		mapStructureUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single MapStructure record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *MapStructure) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single MapStructure record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MapStructure) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no MapStructure provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mapStructurePrimaryKeyMapping)
	sql := "DELETE FROM `map_structures` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from map_structures")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for map_structures")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q mapStructureQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q mapStructureQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no mapStructureQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from map_structures")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for map_structures")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o MapStructureSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MapStructureSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mapStructureBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mapStructurePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `map_structures` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mapStructurePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mapStructure slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for map_structures")
	}

	if len(mapStructureAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *MapStructure) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("boiler: no MapStructure provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MapStructure) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMapStructure(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MapStructureSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("boiler: empty MapStructureSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MapStructureSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MapStructureSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mapStructurePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `map_structures`.* FROM `map_structures` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mapStructurePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in MapStructureSlice")
	}

	*o = slice

	return nil
}

// MapStructureExistsG checks if the MapStructure row exists.
func MapStructureExistsG(ctx context.Context, iD uint64) (bool, error) {
	return MapStructureExists(ctx, boil.GetContextDB(), iD)
}

// MapStructureExists checks if the MapStructure row exists.
func MapStructureExists(ctx context.Context, exec boil.ContextExecutor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `map_structures` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if map_structures exists")
	}

	return exists, nil
}
