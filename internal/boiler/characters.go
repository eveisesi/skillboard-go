// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Character is an object representing the database table.
type Character struct {
	ID             uint64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name           string       `boil:"name" json:"name" toml:"name" yaml:"name"`
	CorporationID  uint         `boil:"corporation_id" json:"corporation_id" toml:"corporation_id" yaml:"corporation_id"`
	AllianceID     null.Uint    `boil:"alliance_id" json:"alliance_id,omitempty" toml:"alliance_id" yaml:"alliance_id,omitempty"`
	FactionID      null.Uint    `boil:"faction_id" json:"faction_id,omitempty" toml:"faction_id" yaml:"faction_id,omitempty"`
	SecurityStatus null.Float32 `boil:"security_status" json:"security_status,omitempty" toml:"security_status" yaml:"security_status,omitempty"`
	Gender         string       `boil:"gender" json:"gender" toml:"gender" yaml:"gender"`
	Birthday       time.Time    `boil:"birthday" json:"birthday" toml:"birthday" yaml:"birthday"`
	Title          null.String  `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	BloodlineID    uint         `boil:"bloodline_id" json:"bloodline_id" toml:"bloodline_id" yaml:"bloodline_id"`
	RaceID         uint         `boil:"race_id" json:"race_id" toml:"race_id" yaml:"race_id"`
	CreatedAt      time.Time    `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time    `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *characterR `boil:"r" json:"r" toml:"r" yaml:"r"`
	L characterL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CharacterColumns = struct {
	ID             string
	Name           string
	CorporationID  string
	AllianceID     string
	FactionID      string
	SecurityStatus string
	Gender         string
	Birthday       string
	Title          string
	BloodlineID    string
	RaceID         string
	CreatedAt      string
	UpdatedAt      string
}{
	ID:             "id",
	Name:           "name",
	CorporationID:  "corporation_id",
	AllianceID:     "alliance_id",
	FactionID:      "faction_id",
	SecurityStatus: "security_status",
	Gender:         "gender",
	Birthday:       "birthday",
	Title:          "title",
	BloodlineID:    "bloodline_id",
	RaceID:         "race_id",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
}

var CharacterTableColumns = struct {
	ID             string
	Name           string
	CorporationID  string
	AllianceID     string
	FactionID      string
	SecurityStatus string
	Gender         string
	Birthday       string
	Title          string
	BloodlineID    string
	RaceID         string
	CreatedAt      string
	UpdatedAt      string
}{
	ID:             "characters.id",
	Name:           "characters.name",
	CorporationID:  "characters.corporation_id",
	AllianceID:     "characters.alliance_id",
	FactionID:      "characters.faction_id",
	SecurityStatus: "characters.security_status",
	Gender:         "characters.gender",
	Birthday:       "characters.birthday",
	Title:          "characters.title",
	BloodlineID:    "characters.bloodline_id",
	RaceID:         "characters.race_id",
	CreatedAt:      "characters.created_at",
	UpdatedAt:      "characters.updated_at",
}

// Generated where

type whereHelpernull_Float32 struct{ field string }

func (w whereHelpernull_Float32) EQ(x null.Float32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float32) NEQ(x null.Float32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float32) LT(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float32) LTE(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float32) GT(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float32) GTE(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Float32) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float32) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CharacterWhere = struct {
	ID             whereHelperuint64
	Name           whereHelperstring
	CorporationID  whereHelperuint
	AllianceID     whereHelpernull_Uint
	FactionID      whereHelpernull_Uint
	SecurityStatus whereHelpernull_Float32
	Gender         whereHelperstring
	Birthday       whereHelpertime_Time
	Title          whereHelpernull_String
	BloodlineID    whereHelperuint
	RaceID         whereHelperuint
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
}{
	ID:             whereHelperuint64{field: "`characters`.`id`"},
	Name:           whereHelperstring{field: "`characters`.`name`"},
	CorporationID:  whereHelperuint{field: "`characters`.`corporation_id`"},
	AllianceID:     whereHelpernull_Uint{field: "`characters`.`alliance_id`"},
	FactionID:      whereHelpernull_Uint{field: "`characters`.`faction_id`"},
	SecurityStatus: whereHelpernull_Float32{field: "`characters`.`security_status`"},
	Gender:         whereHelperstring{field: "`characters`.`gender`"},
	Birthday:       whereHelpertime_Time{field: "`characters`.`birthday`"},
	Title:          whereHelpernull_String{field: "`characters`.`title`"},
	BloodlineID:    whereHelperuint{field: "`characters`.`bloodline_id`"},
	RaceID:         whereHelperuint{field: "`characters`.`race_id`"},
	CreatedAt:      whereHelpertime_Time{field: "`characters`.`created_at`"},
	UpdatedAt:      whereHelpertime_Time{field: "`characters`.`updated_at`"},
}

// CharacterRels is where relationship names are stored.
var CharacterRels = struct {
	IDCharacterCorporationHistories string
}{
	IDCharacterCorporationHistories: "IDCharacterCorporationHistories",
}

// characterR is where relationships are stored.
type characterR struct {
	IDCharacterCorporationHistories CharacterCorporationHistorySlice `boil:"IDCharacterCorporationHistories" json:"IDCharacterCorporationHistories" toml:"IDCharacterCorporationHistories" yaml:"IDCharacterCorporationHistories"`
}

// NewStruct creates a new relationship struct
func (*characterR) NewStruct() *characterR {
	return &characterR{}
}

// characterL is where Load methods for each relationship are stored.
type characterL struct{}

var (
	characterAllColumns            = []string{"id", "name", "corporation_id", "alliance_id", "faction_id", "security_status", "gender", "birthday", "title", "bloodline_id", "race_id", "created_at", "updated_at"}
	characterColumnsWithoutDefault = []string{"id", "name", "corporation_id", "alliance_id", "faction_id", "security_status", "gender", "birthday", "title", "bloodline_id", "race_id", "created_at", "updated_at"}
	characterColumnsWithDefault    = []string{}
	characterPrimaryKeyColumns     = []string{"id"}
)

type (
	// CharacterSlice is an alias for a slice of pointers to Character.
	// This should almost always be used instead of []Character.
	CharacterSlice []*Character
	// CharacterHook is the signature for custom Character hook methods
	CharacterHook func(context.Context, boil.ContextExecutor, *Character) error

	characterQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	characterType                 = reflect.TypeOf(&Character{})
	characterMapping              = queries.MakeStructMapping(characterType)
	characterPrimaryKeyMapping, _ = queries.BindMapping(characterType, characterMapping, characterPrimaryKeyColumns)
	characterInsertCacheMut       sync.RWMutex
	characterInsertCache          = make(map[string]insertCache)
	characterUpdateCacheMut       sync.RWMutex
	characterUpdateCache          = make(map[string]updateCache)
	characterUpsertCacheMut       sync.RWMutex
	characterUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var characterBeforeInsertHooks []CharacterHook
var characterBeforeUpdateHooks []CharacterHook
var characterBeforeDeleteHooks []CharacterHook
var characterBeforeUpsertHooks []CharacterHook

var characterAfterInsertHooks []CharacterHook
var characterAfterSelectHooks []CharacterHook
var characterAfterUpdateHooks []CharacterHook
var characterAfterDeleteHooks []CharacterHook
var characterAfterUpsertHooks []CharacterHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Character) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Character) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Character) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Character) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Character) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Character) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Character) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Character) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Character) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCharacterHook registers your hook function for all future operations.
func AddCharacterHook(hookPoint boil.HookPoint, characterHook CharacterHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		characterBeforeInsertHooks = append(characterBeforeInsertHooks, characterHook)
	case boil.BeforeUpdateHook:
		characterBeforeUpdateHooks = append(characterBeforeUpdateHooks, characterHook)
	case boil.BeforeDeleteHook:
		characterBeforeDeleteHooks = append(characterBeforeDeleteHooks, characterHook)
	case boil.BeforeUpsertHook:
		characterBeforeUpsertHooks = append(characterBeforeUpsertHooks, characterHook)
	case boil.AfterInsertHook:
		characterAfterInsertHooks = append(characterAfterInsertHooks, characterHook)
	case boil.AfterSelectHook:
		characterAfterSelectHooks = append(characterAfterSelectHooks, characterHook)
	case boil.AfterUpdateHook:
		characterAfterUpdateHooks = append(characterAfterUpdateHooks, characterHook)
	case boil.AfterDeleteHook:
		characterAfterDeleteHooks = append(characterAfterDeleteHooks, characterHook)
	case boil.AfterUpsertHook:
		characterAfterUpsertHooks = append(characterAfterUpsertHooks, characterHook)
	}
}

// OneG returns a single character record from the query using the global executor.
func (q characterQuery) OneG(ctx context.Context) (*Character, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single character record from the query.
func (q characterQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Character, error) {
	o := &Character{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for characters")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Character records from the query using the global executor.
func (q characterQuery) AllG(ctx context.Context) (CharacterSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Character records from the query.
func (q characterQuery) All(ctx context.Context, exec boil.ContextExecutor) (CharacterSlice, error) {
	var o []*Character

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Character slice")
	}

	if len(characterAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Character records in the query, and panics on error.
func (q characterQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Character records in the query.
func (q characterQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count characters rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q characterQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q characterQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if characters exists")
	}

	return count > 0, nil
}

// IDCharacterCorporationHistories retrieves all the character_corporation_history's CharacterCorporationHistories with an executor via id column.
func (o *Character) IDCharacterCorporationHistories(mods ...qm.QueryMod) characterCorporationHistoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`character_corporation_history`.`id`=?", o.ID),
	)

	query := CharacterCorporationHistories(queryMods...)
	queries.SetFrom(query.Query, "`character_corporation_history`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`character_corporation_history`.*"})
	}

	return query
}

// LoadIDCharacterCorporationHistories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (characterL) LoadIDCharacterCorporationHistories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCharacter interface{}, mods queries.Applicator) error {
	var slice []*Character
	var object *Character

	if singular {
		object = maybeCharacter.(*Character)
	} else {
		slice = *maybeCharacter.(*[]*Character)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &characterR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &characterR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`character_corporation_history`),
		qm.WhereIn(`character_corporation_history.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load character_corporation_history")
	}

	var resultSlice []*CharacterCorporationHistory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice character_corporation_history")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on character_corporation_history")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for character_corporation_history")
	}

	if len(characterCorporationHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDCharacterCorporationHistories = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ID {
				local.R.IDCharacterCorporationHistories = append(local.R.IDCharacterCorporationHistories, foreign)
				break
			}
		}
	}

	return nil
}

// AddIDCharacterCorporationHistoriesG adds the given related objects to the existing relationships
// of the character, optionally inserting them as new records.
// Appends related to o.R.IDCharacterCorporationHistories.
// Sets related.R.IDCharacter appropriately.
// Uses the global database handle.
func (o *Character) AddIDCharacterCorporationHistoriesG(ctx context.Context, insert bool, related ...*CharacterCorporationHistory) error {
	return o.AddIDCharacterCorporationHistories(ctx, boil.GetContextDB(), insert, related...)
}

// AddIDCharacterCorporationHistories adds the given related objects to the existing relationships
// of the character, optionally inserting them as new records.
// Appends related to o.R.IDCharacterCorporationHistories.
// Sets related.R.IDCharacter appropriately.
func (o *Character) AddIDCharacterCorporationHistories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CharacterCorporationHistory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `character_corporation_history` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"id"}),
				strmangle.WhereClause("`", "`", 0, characterCorporationHistoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID, rel.RecordID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ID = o.ID
		}
	}

	if o.R == nil {
		o.R = &characterR{
			IDCharacterCorporationHistories: related,
		}
	} else {
		o.R.IDCharacterCorporationHistories = append(o.R.IDCharacterCorporationHistories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &characterCorporationHistoryR{
				IDCharacter: o,
			}
		} else {
			rel.R.IDCharacter = o
		}
	}
	return nil
}

// Characters retrieves all the records using an executor.
func Characters(mods ...qm.QueryMod) characterQuery {
	mods = append(mods, qm.From("`characters`"))
	return characterQuery{NewQuery(mods...)}
}

// FindCharacterG retrieves a single record by ID.
func FindCharacterG(ctx context.Context, iD uint64, selectCols ...string) (*Character, error) {
	return FindCharacter(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindCharacter retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCharacter(ctx context.Context, exec boil.ContextExecutor, iD uint64, selectCols ...string) (*Character, error) {
	characterObj := &Character{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `characters` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, characterObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from characters")
	}

	if err = characterObj.doAfterSelectHooks(ctx, exec); err != nil {
		return characterObj, err
	}

	return characterObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Character) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Character) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no characters provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(characterColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	characterInsertCacheMut.RLock()
	cache, cached := characterInsertCache[key]
	characterInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			characterAllColumns,
			characterColumnsWithDefault,
			characterColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(characterType, characterMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(characterType, characterMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `characters` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `characters` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `characters` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, characterPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into characters")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for characters")
	}

CacheNoHooks:
	if !cached {
		characterInsertCacheMut.Lock()
		characterInsertCache[key] = cache
		characterInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Character record using the global executor.
// See Update for more documentation.
func (o *Character) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Character.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Character) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	characterUpdateCacheMut.RLock()
	cache, cached := characterUpdateCache[key]
	characterUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			characterAllColumns,
			characterPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update characters, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `characters` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, characterPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(characterType, characterMapping, append(wl, characterPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update characters row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for characters")
	}

	if !cached {
		characterUpdateCacheMut.Lock()
		characterUpdateCache[key] = cache
		characterUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q characterQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q characterQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for characters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for characters")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CharacterSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CharacterSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), characterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `characters` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, characterPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in character slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all character")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Character) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLCharacterUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Character) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no characters provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(characterColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCharacterUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	characterUpsertCacheMut.RLock()
	cache, cached := characterUpsertCache[key]
	characterUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			characterAllColumns,
			characterColumnsWithDefault,
			characterColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			characterAllColumns,
			characterPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("boiler: unable to upsert characters, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`characters`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `characters` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(characterType, characterMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(characterType, characterMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert for characters")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(characterType, characterMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to retrieve unique values for characters")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for characters")
	}

CacheNoHooks:
	if !cached {
		characterUpsertCacheMut.Lock()
		characterUpsertCache[key] = cache
		characterUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Character record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Character) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Character record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Character) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no Character provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), characterPrimaryKeyMapping)
	sql := "DELETE FROM `characters` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from characters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for characters")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q characterQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q characterQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no characterQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from characters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for characters")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CharacterSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CharacterSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(characterBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), characterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `characters` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, characterPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from character slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for characters")
	}

	if len(characterAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Character) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("boiler: no Character provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Character) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCharacter(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CharacterSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("boiler: empty CharacterSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CharacterSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CharacterSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), characterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `characters`.* FROM `characters` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, characterPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in CharacterSlice")
	}

	*o = slice

	return nil
}

// CharacterExistsG checks if the Character row exists.
func CharacterExistsG(ctx context.Context, iD uint64) (bool, error) {
	return CharacterExists(ctx, boil.GetContextDB(), iD)
}

// CharacterExists checks if the Character row exists.
func CharacterExists(ctx context.Context, exec boil.ContextExecutor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `characters` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if characters exists")
	}

	return exists, nil
}
